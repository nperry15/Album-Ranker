
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Album
 * 
 */
export type Album = $Result.DefaultSelection<Prisma.$AlbumPayload>
/**
 * Model Song
 * 
 */
export type Song = $Result.DefaultSelection<Prisma.$SongPayload>
/**
 * Model AlbumRating
 * 
 */
export type AlbumRating = $Result.DefaultSelection<Prisma.$AlbumRatingPayload>
/**
 * Model RankingSession
 * 
 */
export type RankingSession = $Result.DefaultSelection<Prisma.$RankingSessionPayload>
/**
 * Model RankingItem
 * 
 */
export type RankingItem = $Result.DefaultSelection<Prisma.$RankingItemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  user: 'user',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<ExtArgs>;

  /**
   * `prisma.song`: Exposes CRUD operations for the **Song** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Songs
    * const songs = await prisma.song.findMany()
    * ```
    */
  get song(): Prisma.SongDelegate<ExtArgs>;

  /**
   * `prisma.albumRating`: Exposes CRUD operations for the **AlbumRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlbumRatings
    * const albumRatings = await prisma.albumRating.findMany()
    * ```
    */
  get albumRating(): Prisma.AlbumRatingDelegate<ExtArgs>;

  /**
   * `prisma.rankingSession`: Exposes CRUD operations for the **RankingSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RankingSessions
    * const rankingSessions = await prisma.rankingSession.findMany()
    * ```
    */
  get rankingSession(): Prisma.RankingSessionDelegate<ExtArgs>;

  /**
   * `prisma.rankingItem`: Exposes CRUD operations for the **RankingItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RankingItems
    * const rankingItems = await prisma.rankingItem.findMany()
    * ```
    */
  get rankingItem(): Prisma.RankingItemDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Album: 'Album',
    Song: 'Song',
    AlbumRating: 'AlbumRating',
    RankingSession: 'RankingSession',
    RankingItem: 'RankingItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "album" | "song" | "albumRating" | "rankingSession" | "rankingItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Album: {
        payload: Prisma.$AlbumPayload<ExtArgs>
        fields: Prisma.AlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findFirst: {
            args: Prisma.AlbumFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findMany: {
            args: Prisma.AlbumFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          create: {
            args: Prisma.AlbumCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          createMany: {
            args: Prisma.AlbumCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlbumCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          delete: {
            args: Prisma.AlbumDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          update: {
            args: Prisma.AlbumUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          deleteMany: {
            args: Prisma.AlbumDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlbumUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          aggregate: {
            args: Prisma.AlbumAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbum>
          }
          groupBy: {
            args: Prisma.AlbumGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumCountAggregateOutputType> | number
          }
        }
      }
      Song: {
        payload: Prisma.$SongPayload<ExtArgs>
        fields: Prisma.SongFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SongFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SongFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          findFirst: {
            args: Prisma.SongFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SongFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          findMany: {
            args: Prisma.SongFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>[]
          }
          create: {
            args: Prisma.SongCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          createMany: {
            args: Prisma.SongCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SongCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>[]
          }
          delete: {
            args: Prisma.SongDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          update: {
            args: Prisma.SongUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          deleteMany: {
            args: Prisma.SongDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SongUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SongUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SongPayload>
          }
          aggregate: {
            args: Prisma.SongAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSong>
          }
          groupBy: {
            args: Prisma.SongGroupByArgs<ExtArgs>
            result: $Utils.Optional<SongGroupByOutputType>[]
          }
          count: {
            args: Prisma.SongCountArgs<ExtArgs>
            result: $Utils.Optional<SongCountAggregateOutputType> | number
          }
        }
      }
      AlbumRating: {
        payload: Prisma.$AlbumRatingPayload<ExtArgs>
        fields: Prisma.AlbumRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>
          }
          findFirst: {
            args: Prisma.AlbumRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>
          }
          findMany: {
            args: Prisma.AlbumRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>[]
          }
          create: {
            args: Prisma.AlbumRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>
          }
          createMany: {
            args: Prisma.AlbumRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlbumRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>[]
          }
          delete: {
            args: Prisma.AlbumRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>
          }
          update: {
            args: Prisma.AlbumRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>
          }
          deleteMany: {
            args: Prisma.AlbumRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlbumRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumRatingPayload>
          }
          aggregate: {
            args: Prisma.AlbumRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbumRating>
          }
          groupBy: {
            args: Prisma.AlbumRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumRatingCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumRatingCountAggregateOutputType> | number
          }
        }
      }
      RankingSession: {
        payload: Prisma.$RankingSessionPayload<ExtArgs>
        fields: Prisma.RankingSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankingSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankingSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>
          }
          findFirst: {
            args: Prisma.RankingSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankingSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>
          }
          findMany: {
            args: Prisma.RankingSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>[]
          }
          create: {
            args: Prisma.RankingSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>
          }
          createMany: {
            args: Prisma.RankingSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RankingSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>[]
          }
          delete: {
            args: Prisma.RankingSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>
          }
          update: {
            args: Prisma.RankingSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>
          }
          deleteMany: {
            args: Prisma.RankingSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RankingSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RankingSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingSessionPayload>
          }
          aggregate: {
            args: Prisma.RankingSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRankingSession>
          }
          groupBy: {
            args: Prisma.RankingSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RankingSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankingSessionCountArgs<ExtArgs>
            result: $Utils.Optional<RankingSessionCountAggregateOutputType> | number
          }
        }
      }
      RankingItem: {
        payload: Prisma.$RankingItemPayload<ExtArgs>
        fields: Prisma.RankingItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RankingItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RankingItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>
          }
          findFirst: {
            args: Prisma.RankingItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RankingItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>
          }
          findMany: {
            args: Prisma.RankingItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>[]
          }
          create: {
            args: Prisma.RankingItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>
          }
          createMany: {
            args: Prisma.RankingItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RankingItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>[]
          }
          delete: {
            args: Prisma.RankingItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>
          }
          update: {
            args: Prisma.RankingItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>
          }
          deleteMany: {
            args: Prisma.RankingItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RankingItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RankingItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RankingItemPayload>
          }
          aggregate: {
            args: Prisma.RankingItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRankingItem>
          }
          groupBy: {
            args: Prisma.RankingItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<RankingItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.RankingItemCountArgs<ExtArgs>
            result: $Utils.Optional<RankingItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    rankings: number
    ratings: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rankings?: boolean | UserCountOutputTypeCountRankingsArgs
    ratings?: boolean | UserCountOutputTypeCountRatingsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumRatingWhereInput
  }


  /**
   * Count Type AlbumCountOutputType
   */

  export type AlbumCountOutputType = {
    songs: number
    ratings: number
    rankings: number
  }

  export type AlbumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    songs?: boolean | AlbumCountOutputTypeCountSongsArgs
    ratings?: boolean | AlbumCountOutputTypeCountRatingsArgs
    rankings?: boolean | AlbumCountOutputTypeCountRankingsArgs
  }

  // Custom InputTypes
  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountSongsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SongWhereInput
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumRatingWhereInput
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountRankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingSessionWhereInput
  }


  /**
   * Count Type SongCountOutputType
   */

  export type SongCountOutputType = {
    rankingItems: number
  }

  export type SongCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rankingItems?: boolean | SongCountOutputTypeCountRankingItemsArgs
  }

  // Custom InputTypes
  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SongCountOutputType
     */
    select?: SongCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SongCountOutputType without action
   */
  export type SongCountOutputTypeCountRankingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingItemWhereInput
  }


  /**
   * Count Type RankingSessionCountOutputType
   */

  export type RankingSessionCountOutputType = {
    items: number
  }

  export type RankingSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | RankingSessionCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * RankingSessionCountOutputType without action
   */
  export type RankingSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSessionCountOutputType
     */
    select?: RankingSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RankingSessionCountOutputType without action
   */
  export type RankingSessionCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    passwordHash: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    passwordHash: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rankings?: boolean | User$rankingsArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rankings?: boolean | User$rankingsArgs<ExtArgs>
    ratings?: boolean | User$ratingsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      rankings: Prisma.$RankingSessionPayload<ExtArgs>[]
      ratings: Prisma.$AlbumRatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      passwordHash: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rankings<T extends User$rankingsArgs<ExtArgs> = {}>(args?: Subset<T, User$rankingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findMany"> | Null>
    ratings<T extends User$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, User$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.rankings
   */
  export type User$rankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    where?: RankingSessionWhereInput
    orderBy?: RankingSessionOrderByWithRelationInput | RankingSessionOrderByWithRelationInput[]
    cursor?: RankingSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingSessionScalarFieldEnum | RankingSessionScalarFieldEnum[]
  }

  /**
   * User.ratings
   */
  export type User$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    where?: AlbumRatingWhereInput
    orderBy?: AlbumRatingOrderByWithRelationInput | AlbumRatingOrderByWithRelationInput[]
    cursor?: AlbumRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumRatingScalarFieldEnum | AlbumRatingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Album
   */

  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumAvgAggregateOutputType = {
    id: number | null
  }

  export type AlbumSumAggregateOutputType = {
    id: number | null
  }

  export type AlbumMinAggregateOutputType = {
    id: number | null
    title: string | null
    artist: string | null
    spotifyId: string | null
    coverUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: number | null
    title: string | null
    artist: string | null
    spotifyId: string | null
    coverUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    title: number
    artist: number
    spotifyId: number
    coverUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlbumAvgAggregateInputType = {
    id?: true
  }

  export type AlbumSumAggregateInputType = {
    id?: true
  }

  export type AlbumMinAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    spotifyId?: true
    coverUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    spotifyId?: true
    coverUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    title?: true
    artist?: true
    spotifyId?: true
    coverUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlbumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithAggregationInput | AlbumOrderByWithAggregationInput[]
    by: AlbumScalarFieldEnum[] | AlbumScalarFieldEnum
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _avg?: AlbumAvgAggregateInputType
    _sum?: AlbumSumAggregateInputType
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }

  export type AlbumGroupByOutputType = {
    id: number
    title: string
    artist: string | null
    spotifyId: string | null
    coverUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    spotifyId?: boolean
    coverUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    songs?: boolean | Album$songsArgs<ExtArgs>
    ratings?: boolean | Album$ratingsArgs<ExtArgs>
    rankings?: boolean | Album$rankingsArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    artist?: boolean
    spotifyId?: boolean
    coverUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectScalar = {
    id?: boolean
    title?: boolean
    artist?: boolean
    spotifyId?: boolean
    coverUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlbumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    songs?: boolean | Album$songsArgs<ExtArgs>
    ratings?: boolean | Album$ratingsArgs<ExtArgs>
    rankings?: boolean | Album$rankingsArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlbumIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AlbumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Album"
    objects: {
      songs: Prisma.$SongPayload<ExtArgs>[]
      ratings: Prisma.$AlbumRatingPayload<ExtArgs>[]
      rankings: Prisma.$RankingSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      artist: string | null
      spotifyId: string | null
      coverUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["album"]>
    composites: {}
  }

  type AlbumGetPayload<S extends boolean | null | undefined | AlbumDefaultArgs> = $Result.GetResult<Prisma.$AlbumPayload, S>

  type AlbumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlbumFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Album'], meta: { name: 'Album' } }
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumFindUniqueArgs>(args: SelectSubset<T, AlbumFindUniqueArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Album that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumFindFirstArgs>(args?: SelectSubset<T, AlbumFindFirstArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Album that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlbumFindManyArgs>(args?: SelectSubset<T, AlbumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
     */
    create<T extends AlbumCreateArgs>(args: SelectSubset<T, AlbumCreateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Albums.
     * @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumCreateManyArgs>(args?: SelectSubset<T, AlbumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Albums and returns the data saved in the database.
     * @param {AlbumCreateManyAndReturnArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Albums and only return the `id`
     * const albumWithIdOnly = await prisma.album.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlbumCreateManyAndReturnArgs>(args?: SelectSubset<T, AlbumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
     */
    delete<T extends AlbumDeleteArgs>(args: SelectSubset<T, AlbumDeleteArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumUpdateArgs>(args: SelectSubset<T, AlbumUpdateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumDeleteManyArgs>(args?: SelectSubset<T, AlbumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumUpdateManyArgs>(args: SelectSubset<T, AlbumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
     */
    upsert<T extends AlbumUpsertArgs>(args: SelectSubset<T, AlbumUpsertArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Album model
   */
  readonly fields: AlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    songs<T extends Album$songsArgs<ExtArgs> = {}>(args?: Subset<T, Album$songsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findMany"> | Null>
    ratings<T extends Album$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, Album$ratingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "findMany"> | Null>
    rankings<T extends Album$rankingsArgs<ExtArgs> = {}>(args?: Subset<T, Album$rankingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Album model
   */ 
  interface AlbumFieldRefs {
    readonly id: FieldRef<"Album", 'Int'>
    readonly title: FieldRef<"Album", 'String'>
    readonly artist: FieldRef<"Album", 'String'>
    readonly spotifyId: FieldRef<"Album", 'String'>
    readonly coverUrl: FieldRef<"Album", 'String'>
    readonly createdAt: FieldRef<"Album", 'DateTime'>
    readonly updatedAt: FieldRef<"Album", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Album findUnique
   */
  export type AlbumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findFirst
   */
  export type AlbumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findMany
   */
  export type AlbumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album create
   */
  export type AlbumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }

  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Album createManyAndReturn
   */
  export type AlbumCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Album update
   */
  export type AlbumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
  }

  /**
   * Album upsert
   */
  export type AlbumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }

  /**
   * Album delete
   */
  export type AlbumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
  }

  /**
   * Album.songs
   */
  export type Album$songsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    where?: SongWhereInput
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    cursor?: SongWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Album.ratings
   */
  export type Album$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    where?: AlbumRatingWhereInput
    orderBy?: AlbumRatingOrderByWithRelationInput | AlbumRatingOrderByWithRelationInput[]
    cursor?: AlbumRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumRatingScalarFieldEnum | AlbumRatingScalarFieldEnum[]
  }

  /**
   * Album.rankings
   */
  export type Album$rankingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    where?: RankingSessionWhereInput
    orderBy?: RankingSessionOrderByWithRelationInput | RankingSessionOrderByWithRelationInput[]
    cursor?: RankingSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingSessionScalarFieldEnum | RankingSessionScalarFieldEnum[]
  }

  /**
   * Album without action
   */
  export type AlbumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
  }


  /**
   * Model Song
   */

  export type AggregateSong = {
    _count: SongCountAggregateOutputType | null
    _avg: SongAvgAggregateOutputType | null
    _sum: SongSumAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
  }

  export type SongAvgAggregateOutputType = {
    id: number | null
    trackNumber: number | null
    albumId: number | null
  }

  export type SongSumAggregateOutputType = {
    id: number | null
    trackNumber: number | null
    albumId: number | null
  }

  export type SongMinAggregateOutputType = {
    id: number | null
    title: string | null
    trackNumber: number | null
    spotifyId: string | null
    albumId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SongMaxAggregateOutputType = {
    id: number | null
    title: string | null
    trackNumber: number | null
    spotifyId: string | null
    albumId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SongCountAggregateOutputType = {
    id: number
    title: number
    trackNumber: number
    spotifyId: number
    albumId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SongAvgAggregateInputType = {
    id?: true
    trackNumber?: true
    albumId?: true
  }

  export type SongSumAggregateInputType = {
    id?: true
    trackNumber?: true
    albumId?: true
  }

  export type SongMinAggregateInputType = {
    id?: true
    title?: true
    trackNumber?: true
    spotifyId?: true
    albumId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SongMaxAggregateInputType = {
    id?: true
    title?: true
    trackNumber?: true
    spotifyId?: true
    albumId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SongCountAggregateInputType = {
    id?: true
    title?: true
    trackNumber?: true
    spotifyId?: true
    albumId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SongAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Song to aggregate.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Songs
    **/
    _count?: true | SongCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SongAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SongSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SongMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SongMaxAggregateInputType
  }

  export type GetSongAggregateType<T extends SongAggregateArgs> = {
        [P in keyof T & keyof AggregateSong]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSong[P]>
      : GetScalarType<T[P], AggregateSong[P]>
  }




  export type SongGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SongWhereInput
    orderBy?: SongOrderByWithAggregationInput | SongOrderByWithAggregationInput[]
    by: SongScalarFieldEnum[] | SongScalarFieldEnum
    having?: SongScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SongCountAggregateInputType | true
    _avg?: SongAvgAggregateInputType
    _sum?: SongSumAggregateInputType
    _min?: SongMinAggregateInputType
    _max?: SongMaxAggregateInputType
  }

  export type SongGroupByOutputType = {
    id: number
    title: string
    trackNumber: number | null
    spotifyId: string | null
    albumId: number
    createdAt: Date
    updatedAt: Date
    _count: SongCountAggregateOutputType | null
    _avg: SongAvgAggregateOutputType | null
    _sum: SongSumAggregateOutputType | null
    _min: SongMinAggregateOutputType | null
    _max: SongMaxAggregateOutputType | null
  }

  type GetSongGroupByPayload<T extends SongGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SongGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SongGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SongGroupByOutputType[P]>
            : GetScalarType<T[P], SongGroupByOutputType[P]>
        }
      >
    >


  export type SongSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    trackNumber?: boolean
    spotifyId?: boolean
    albumId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    rankingItems?: boolean | Song$rankingItemsArgs<ExtArgs>
    _count?: boolean | SongCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["song"]>

  export type SongSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    trackNumber?: boolean
    spotifyId?: boolean
    albumId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["song"]>

  export type SongSelectScalar = {
    id?: boolean
    title?: boolean
    trackNumber?: boolean
    spotifyId?: boolean
    albumId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SongInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    rankingItems?: boolean | Song$rankingItemsArgs<ExtArgs>
    _count?: boolean | SongCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SongIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }

  export type $SongPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Song"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      rankingItems: Prisma.$RankingItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      trackNumber: number | null
      spotifyId: string | null
      albumId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["song"]>
    composites: {}
  }

  type SongGetPayload<S extends boolean | null | undefined | SongDefaultArgs> = $Result.GetResult<Prisma.$SongPayload, S>

  type SongCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SongFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SongCountAggregateInputType | true
    }

  export interface SongDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Song'], meta: { name: 'Song' } }
    /**
     * Find zero or one Song that matches the filter.
     * @param {SongFindUniqueArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SongFindUniqueArgs>(args: SelectSubset<T, SongFindUniqueArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Song that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SongFindUniqueOrThrowArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SongFindUniqueOrThrowArgs>(args: SelectSubset<T, SongFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Song that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindFirstArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SongFindFirstArgs>(args?: SelectSubset<T, SongFindFirstArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Song that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindFirstOrThrowArgs} args - Arguments to find a Song
     * @example
     * // Get one Song
     * const song = await prisma.song.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SongFindFirstOrThrowArgs>(args?: SelectSubset<T, SongFindFirstOrThrowArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Songs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Songs
     * const songs = await prisma.song.findMany()
     * 
     * // Get first 10 Songs
     * const songs = await prisma.song.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const songWithIdOnly = await prisma.song.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SongFindManyArgs>(args?: SelectSubset<T, SongFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Song.
     * @param {SongCreateArgs} args - Arguments to create a Song.
     * @example
     * // Create one Song
     * const Song = await prisma.song.create({
     *   data: {
     *     // ... data to create a Song
     *   }
     * })
     * 
     */
    create<T extends SongCreateArgs>(args: SelectSubset<T, SongCreateArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Songs.
     * @param {SongCreateManyArgs} args - Arguments to create many Songs.
     * @example
     * // Create many Songs
     * const song = await prisma.song.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SongCreateManyArgs>(args?: SelectSubset<T, SongCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Songs and returns the data saved in the database.
     * @param {SongCreateManyAndReturnArgs} args - Arguments to create many Songs.
     * @example
     * // Create many Songs
     * const song = await prisma.song.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Songs and only return the `id`
     * const songWithIdOnly = await prisma.song.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SongCreateManyAndReturnArgs>(args?: SelectSubset<T, SongCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Song.
     * @param {SongDeleteArgs} args - Arguments to delete one Song.
     * @example
     * // Delete one Song
     * const Song = await prisma.song.delete({
     *   where: {
     *     // ... filter to delete one Song
     *   }
     * })
     * 
     */
    delete<T extends SongDeleteArgs>(args: SelectSubset<T, SongDeleteArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Song.
     * @param {SongUpdateArgs} args - Arguments to update one Song.
     * @example
     * // Update one Song
     * const song = await prisma.song.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SongUpdateArgs>(args: SelectSubset<T, SongUpdateArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Songs.
     * @param {SongDeleteManyArgs} args - Arguments to filter Songs to delete.
     * @example
     * // Delete a few Songs
     * const { count } = await prisma.song.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SongDeleteManyArgs>(args?: SelectSubset<T, SongDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Songs
     * const song = await prisma.song.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SongUpdateManyArgs>(args: SelectSubset<T, SongUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Song.
     * @param {SongUpsertArgs} args - Arguments to update or create a Song.
     * @example
     * // Update or create a Song
     * const song = await prisma.song.upsert({
     *   create: {
     *     // ... data to create a Song
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Song we want to update
     *   }
     * })
     */
    upsert<T extends SongUpsertArgs>(args: SelectSubset<T, SongUpsertArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Songs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongCountArgs} args - Arguments to filter Songs to count.
     * @example
     * // Count the number of Songs
     * const count = await prisma.song.count({
     *   where: {
     *     // ... the filter for the Songs we want to count
     *   }
     * })
    **/
    count<T extends SongCountArgs>(
      args?: Subset<T, SongCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SongCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SongAggregateArgs>(args: Subset<T, SongAggregateArgs>): Prisma.PrismaPromise<GetSongAggregateType<T>>

    /**
     * Group by Song.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SongGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SongGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SongGroupByArgs['orderBy'] }
        : { orderBy?: SongGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SongGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSongGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Song model
   */
  readonly fields: SongFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Song.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SongClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    rankingItems<T extends Song$rankingItemsArgs<ExtArgs> = {}>(args?: Subset<T, Song$rankingItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Song model
   */ 
  interface SongFieldRefs {
    readonly id: FieldRef<"Song", 'Int'>
    readonly title: FieldRef<"Song", 'String'>
    readonly trackNumber: FieldRef<"Song", 'Int'>
    readonly spotifyId: FieldRef<"Song", 'String'>
    readonly albumId: FieldRef<"Song", 'Int'>
    readonly createdAt: FieldRef<"Song", 'DateTime'>
    readonly updatedAt: FieldRef<"Song", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Song findUnique
   */
  export type SongFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song findUniqueOrThrow
   */
  export type SongFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song findFirst
   */
  export type SongFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Songs.
     */
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Song findFirstOrThrow
   */
  export type SongFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Song to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Songs.
     */
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Song findMany
   */
  export type SongFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter, which Songs to fetch.
     */
    where?: SongWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Songs to fetch.
     */
    orderBy?: SongOrderByWithRelationInput | SongOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Songs.
     */
    cursor?: SongWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Songs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Songs.
     */
    skip?: number
    distinct?: SongScalarFieldEnum | SongScalarFieldEnum[]
  }

  /**
   * Song create
   */
  export type SongCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The data needed to create a Song.
     */
    data: XOR<SongCreateInput, SongUncheckedCreateInput>
  }

  /**
   * Song createMany
   */
  export type SongCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Songs.
     */
    data: SongCreateManyInput | SongCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Song createManyAndReturn
   */
  export type SongCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Songs.
     */
    data: SongCreateManyInput | SongCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Song update
   */
  export type SongUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The data needed to update a Song.
     */
    data: XOR<SongUpdateInput, SongUncheckedUpdateInput>
    /**
     * Choose, which Song to update.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song updateMany
   */
  export type SongUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Songs.
     */
    data: XOR<SongUpdateManyMutationInput, SongUncheckedUpdateManyInput>
    /**
     * Filter which Songs to update
     */
    where?: SongWhereInput
  }

  /**
   * Song upsert
   */
  export type SongUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * The filter to search for the Song to update in case it exists.
     */
    where: SongWhereUniqueInput
    /**
     * In case the Song found by the `where` argument doesn't exist, create a new Song with this data.
     */
    create: XOR<SongCreateInput, SongUncheckedCreateInput>
    /**
     * In case the Song was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SongUpdateInput, SongUncheckedUpdateInput>
  }

  /**
   * Song delete
   */
  export type SongDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
    /**
     * Filter which Song to delete.
     */
    where: SongWhereUniqueInput
  }

  /**
   * Song deleteMany
   */
  export type SongDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Songs to delete
     */
    where?: SongWhereInput
  }

  /**
   * Song.rankingItems
   */
  export type Song$rankingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    where?: RankingItemWhereInput
    orderBy?: RankingItemOrderByWithRelationInput | RankingItemOrderByWithRelationInput[]
    cursor?: RankingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingItemScalarFieldEnum | RankingItemScalarFieldEnum[]
  }

  /**
   * Song without action
   */
  export type SongDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Song
     */
    select?: SongSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SongInclude<ExtArgs> | null
  }


  /**
   * Model AlbumRating
   */

  export type AggregateAlbumRating = {
    _count: AlbumRatingCountAggregateOutputType | null
    _avg: AlbumRatingAvgAggregateOutputType | null
    _sum: AlbumRatingSumAggregateOutputType | null
    _min: AlbumRatingMinAggregateOutputType | null
    _max: AlbumRatingMaxAggregateOutputType | null
  }

  export type AlbumRatingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
    stars: number | null
  }

  export type AlbumRatingSumAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
    stars: number | null
  }

  export type AlbumRatingMinAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
    stars: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumRatingMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
    stars: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AlbumRatingCountAggregateOutputType = {
    id: number
    userId: number
    albumId: number
    stars: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AlbumRatingAvgAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    stars?: true
  }

  export type AlbumRatingSumAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    stars?: true
  }

  export type AlbumRatingMinAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    stars?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumRatingMaxAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    stars?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AlbumRatingCountAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    stars?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AlbumRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumRating to aggregate.
     */
    where?: AlbumRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumRatings to fetch.
     */
    orderBy?: AlbumRatingOrderByWithRelationInput | AlbumRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlbumRatings
    **/
    _count?: true | AlbumRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumRatingMaxAggregateInputType
  }

  export type GetAlbumRatingAggregateType<T extends AlbumRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbumRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbumRating[P]>
      : GetScalarType<T[P], AggregateAlbumRating[P]>
  }




  export type AlbumRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumRatingWhereInput
    orderBy?: AlbumRatingOrderByWithAggregationInput | AlbumRatingOrderByWithAggregationInput[]
    by: AlbumRatingScalarFieldEnum[] | AlbumRatingScalarFieldEnum
    having?: AlbumRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumRatingCountAggregateInputType | true
    _avg?: AlbumRatingAvgAggregateInputType
    _sum?: AlbumRatingSumAggregateInputType
    _min?: AlbumRatingMinAggregateInputType
    _max?: AlbumRatingMaxAggregateInputType
  }

  export type AlbumRatingGroupByOutputType = {
    id: number
    userId: number
    albumId: number
    stars: number
    createdAt: Date
    updatedAt: Date
    _count: AlbumRatingCountAggregateOutputType | null
    _avg: AlbumRatingAvgAggregateOutputType | null
    _sum: AlbumRatingSumAggregateOutputType | null
    _min: AlbumRatingMinAggregateOutputType | null
    _max: AlbumRatingMaxAggregateOutputType | null
  }

  type GetAlbumRatingGroupByPayload<T extends AlbumRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumRatingGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumRatingGroupByOutputType[P]>
        }
      >
    >


  export type AlbumRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    albumId?: boolean
    stars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["albumRating"]>

  export type AlbumRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    albumId?: boolean
    stars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["albumRating"]>

  export type AlbumRatingSelectScalar = {
    id?: boolean
    userId?: boolean
    albumId?: boolean
    stars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AlbumRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }
  export type AlbumRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }

  export type $AlbumRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlbumRating"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      album: Prisma.$AlbumPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      albumId: number
      stars: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["albumRating"]>
    composites: {}
  }

  type AlbumRatingGetPayload<S extends boolean | null | undefined | AlbumRatingDefaultArgs> = $Result.GetResult<Prisma.$AlbumRatingPayload, S>

  type AlbumRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlbumRatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlbumRatingCountAggregateInputType | true
    }

  export interface AlbumRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlbumRating'], meta: { name: 'AlbumRating' } }
    /**
     * Find zero or one AlbumRating that matches the filter.
     * @param {AlbumRatingFindUniqueArgs} args - Arguments to find a AlbumRating
     * @example
     * // Get one AlbumRating
     * const albumRating = await prisma.albumRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumRatingFindUniqueArgs>(args: SelectSubset<T, AlbumRatingFindUniqueArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AlbumRating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlbumRatingFindUniqueOrThrowArgs} args - Arguments to find a AlbumRating
     * @example
     * // Get one AlbumRating
     * const albumRating = await prisma.albumRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AlbumRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumRatingFindFirstArgs} args - Arguments to find a AlbumRating
     * @example
     * // Get one AlbumRating
     * const albumRating = await prisma.albumRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumRatingFindFirstArgs>(args?: SelectSubset<T, AlbumRatingFindFirstArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AlbumRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumRatingFindFirstOrThrowArgs} args - Arguments to find a AlbumRating
     * @example
     * // Get one AlbumRating
     * const albumRating = await prisma.albumRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AlbumRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlbumRatings
     * const albumRatings = await prisma.albumRating.findMany()
     * 
     * // Get first 10 AlbumRatings
     * const albumRatings = await prisma.albumRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumRatingWithIdOnly = await prisma.albumRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlbumRatingFindManyArgs>(args?: SelectSubset<T, AlbumRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AlbumRating.
     * @param {AlbumRatingCreateArgs} args - Arguments to create a AlbumRating.
     * @example
     * // Create one AlbumRating
     * const AlbumRating = await prisma.albumRating.create({
     *   data: {
     *     // ... data to create a AlbumRating
     *   }
     * })
     * 
     */
    create<T extends AlbumRatingCreateArgs>(args: SelectSubset<T, AlbumRatingCreateArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AlbumRatings.
     * @param {AlbumRatingCreateManyArgs} args - Arguments to create many AlbumRatings.
     * @example
     * // Create many AlbumRatings
     * const albumRating = await prisma.albumRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumRatingCreateManyArgs>(args?: SelectSubset<T, AlbumRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlbumRatings and returns the data saved in the database.
     * @param {AlbumRatingCreateManyAndReturnArgs} args - Arguments to create many AlbumRatings.
     * @example
     * // Create many AlbumRatings
     * const albumRating = await prisma.albumRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlbumRatings and only return the `id`
     * const albumRatingWithIdOnly = await prisma.albumRating.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlbumRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, AlbumRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AlbumRating.
     * @param {AlbumRatingDeleteArgs} args - Arguments to delete one AlbumRating.
     * @example
     * // Delete one AlbumRating
     * const AlbumRating = await prisma.albumRating.delete({
     *   where: {
     *     // ... filter to delete one AlbumRating
     *   }
     * })
     * 
     */
    delete<T extends AlbumRatingDeleteArgs>(args: SelectSubset<T, AlbumRatingDeleteArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AlbumRating.
     * @param {AlbumRatingUpdateArgs} args - Arguments to update one AlbumRating.
     * @example
     * // Update one AlbumRating
     * const albumRating = await prisma.albumRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumRatingUpdateArgs>(args: SelectSubset<T, AlbumRatingUpdateArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AlbumRatings.
     * @param {AlbumRatingDeleteManyArgs} args - Arguments to filter AlbumRatings to delete.
     * @example
     * // Delete a few AlbumRatings
     * const { count } = await prisma.albumRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumRatingDeleteManyArgs>(args?: SelectSubset<T, AlbumRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlbumRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlbumRatings
     * const albumRating = await prisma.albumRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumRatingUpdateManyArgs>(args: SelectSubset<T, AlbumRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AlbumRating.
     * @param {AlbumRatingUpsertArgs} args - Arguments to update or create a AlbumRating.
     * @example
     * // Update or create a AlbumRating
     * const albumRating = await prisma.albumRating.upsert({
     *   create: {
     *     // ... data to create a AlbumRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlbumRating we want to update
     *   }
     * })
     */
    upsert<T extends AlbumRatingUpsertArgs>(args: SelectSubset<T, AlbumRatingUpsertArgs<ExtArgs>>): Prisma__AlbumRatingClient<$Result.GetResult<Prisma.$AlbumRatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AlbumRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumRatingCountArgs} args - Arguments to filter AlbumRatings to count.
     * @example
     * // Count the number of AlbumRatings
     * const count = await prisma.albumRating.count({
     *   where: {
     *     // ... the filter for the AlbumRatings we want to count
     *   }
     * })
    **/
    count<T extends AlbumRatingCountArgs>(
      args?: Subset<T, AlbumRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlbumRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumRatingAggregateArgs>(args: Subset<T, AlbumRatingAggregateArgs>): Prisma.PrismaPromise<GetAlbumRatingAggregateType<T>>

    /**
     * Group by AlbumRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumRatingGroupByArgs['orderBy'] }
        : { orderBy?: AlbumRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlbumRating model
   */
  readonly fields: AlbumRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlbumRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlbumRating model
   */ 
  interface AlbumRatingFieldRefs {
    readonly id: FieldRef<"AlbumRating", 'Int'>
    readonly userId: FieldRef<"AlbumRating", 'Int'>
    readonly albumId: FieldRef<"AlbumRating", 'Int'>
    readonly stars: FieldRef<"AlbumRating", 'Int'>
    readonly createdAt: FieldRef<"AlbumRating", 'DateTime'>
    readonly updatedAt: FieldRef<"AlbumRating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AlbumRating findUnique
   */
  export type AlbumRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * Filter, which AlbumRating to fetch.
     */
    where: AlbumRatingWhereUniqueInput
  }

  /**
   * AlbumRating findUniqueOrThrow
   */
  export type AlbumRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * Filter, which AlbumRating to fetch.
     */
    where: AlbumRatingWhereUniqueInput
  }

  /**
   * AlbumRating findFirst
   */
  export type AlbumRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * Filter, which AlbumRating to fetch.
     */
    where?: AlbumRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumRatings to fetch.
     */
    orderBy?: AlbumRatingOrderByWithRelationInput | AlbumRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumRatings.
     */
    cursor?: AlbumRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumRatings.
     */
    distinct?: AlbumRatingScalarFieldEnum | AlbumRatingScalarFieldEnum[]
  }

  /**
   * AlbumRating findFirstOrThrow
   */
  export type AlbumRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * Filter, which AlbumRating to fetch.
     */
    where?: AlbumRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumRatings to fetch.
     */
    orderBy?: AlbumRatingOrderByWithRelationInput | AlbumRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumRatings.
     */
    cursor?: AlbumRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumRatings.
     */
    distinct?: AlbumRatingScalarFieldEnum | AlbumRatingScalarFieldEnum[]
  }

  /**
   * AlbumRating findMany
   */
  export type AlbumRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * Filter, which AlbumRatings to fetch.
     */
    where?: AlbumRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumRatings to fetch.
     */
    orderBy?: AlbumRatingOrderByWithRelationInput | AlbumRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlbumRatings.
     */
    cursor?: AlbumRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumRatings.
     */
    skip?: number
    distinct?: AlbumRatingScalarFieldEnum | AlbumRatingScalarFieldEnum[]
  }

  /**
   * AlbumRating create
   */
  export type AlbumRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a AlbumRating.
     */
    data: XOR<AlbumRatingCreateInput, AlbumRatingUncheckedCreateInput>
  }

  /**
   * AlbumRating createMany
   */
  export type AlbumRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlbumRatings.
     */
    data: AlbumRatingCreateManyInput | AlbumRatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AlbumRating createManyAndReturn
   */
  export type AlbumRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AlbumRatings.
     */
    data: AlbumRatingCreateManyInput | AlbumRatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlbumRating update
   */
  export type AlbumRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a AlbumRating.
     */
    data: XOR<AlbumRatingUpdateInput, AlbumRatingUncheckedUpdateInput>
    /**
     * Choose, which AlbumRating to update.
     */
    where: AlbumRatingWhereUniqueInput
  }

  /**
   * AlbumRating updateMany
   */
  export type AlbumRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlbumRatings.
     */
    data: XOR<AlbumRatingUpdateManyMutationInput, AlbumRatingUncheckedUpdateManyInput>
    /**
     * Filter which AlbumRatings to update
     */
    where?: AlbumRatingWhereInput
  }

  /**
   * AlbumRating upsert
   */
  export type AlbumRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the AlbumRating to update in case it exists.
     */
    where: AlbumRatingWhereUniqueInput
    /**
     * In case the AlbumRating found by the `where` argument doesn't exist, create a new AlbumRating with this data.
     */
    create: XOR<AlbumRatingCreateInput, AlbumRatingUncheckedCreateInput>
    /**
     * In case the AlbumRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumRatingUpdateInput, AlbumRatingUncheckedUpdateInput>
  }

  /**
   * AlbumRating delete
   */
  export type AlbumRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
    /**
     * Filter which AlbumRating to delete.
     */
    where: AlbumRatingWhereUniqueInput
  }

  /**
   * AlbumRating deleteMany
   */
  export type AlbumRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumRatings to delete
     */
    where?: AlbumRatingWhereInput
  }

  /**
   * AlbumRating without action
   */
  export type AlbumRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumRating
     */
    select?: AlbumRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumRatingInclude<ExtArgs> | null
  }


  /**
   * Model RankingSession
   */

  export type AggregateRankingSession = {
    _count: RankingSessionCountAggregateOutputType | null
    _avg: RankingSessionAvgAggregateOutputType | null
    _sum: RankingSessionSumAggregateOutputType | null
    _min: RankingSessionMinAggregateOutputType | null
    _max: RankingSessionMaxAggregateOutputType | null
  }

  export type RankingSessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
  }

  export type RankingSessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
  }

  export type RankingSessionMinAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
    createdAt: Date | null
  }

  export type RankingSessionMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    albumId: number | null
    createdAt: Date | null
  }

  export type RankingSessionCountAggregateOutputType = {
    id: number
    userId: number
    albumId: number
    createdAt: number
    _all: number
  }


  export type RankingSessionAvgAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
  }

  export type RankingSessionSumAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
  }

  export type RankingSessionMinAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    createdAt?: true
  }

  export type RankingSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    createdAt?: true
  }

  export type RankingSessionCountAggregateInputType = {
    id?: true
    userId?: true
    albumId?: true
    createdAt?: true
    _all?: true
  }

  export type RankingSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingSession to aggregate.
     */
    where?: RankingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingSessions to fetch.
     */
    orderBy?: RankingSessionOrderByWithRelationInput | RankingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RankingSessions
    **/
    _count?: true | RankingSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RankingSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RankingSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankingSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankingSessionMaxAggregateInputType
  }

  export type GetRankingSessionAggregateType<T extends RankingSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateRankingSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRankingSession[P]>
      : GetScalarType<T[P], AggregateRankingSession[P]>
  }




  export type RankingSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingSessionWhereInput
    orderBy?: RankingSessionOrderByWithAggregationInput | RankingSessionOrderByWithAggregationInput[]
    by: RankingSessionScalarFieldEnum[] | RankingSessionScalarFieldEnum
    having?: RankingSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankingSessionCountAggregateInputType | true
    _avg?: RankingSessionAvgAggregateInputType
    _sum?: RankingSessionSumAggregateInputType
    _min?: RankingSessionMinAggregateInputType
    _max?: RankingSessionMaxAggregateInputType
  }

  export type RankingSessionGroupByOutputType = {
    id: number
    userId: number
    albumId: number
    createdAt: Date
    _count: RankingSessionCountAggregateOutputType | null
    _avg: RankingSessionAvgAggregateOutputType | null
    _sum: RankingSessionSumAggregateOutputType | null
    _min: RankingSessionMinAggregateOutputType | null
    _max: RankingSessionMaxAggregateOutputType | null
  }

  type GetRankingSessionGroupByPayload<T extends RankingSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankingSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankingSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankingSessionGroupByOutputType[P]>
            : GetScalarType<T[P], RankingSessionGroupByOutputType[P]>
        }
      >
    >


  export type RankingSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    albumId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    items?: boolean | RankingSession$itemsArgs<ExtArgs>
    _count?: boolean | RankingSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingSession"]>

  export type RankingSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    albumId?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingSession"]>

  export type RankingSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    albumId?: boolean
    createdAt?: boolean
  }

  export type RankingSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    items?: boolean | RankingSession$itemsArgs<ExtArgs>
    _count?: boolean | RankingSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RankingSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }

  export type $RankingSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RankingSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      album: Prisma.$AlbumPayload<ExtArgs>
      items: Prisma.$RankingItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      albumId: number
      createdAt: Date
    }, ExtArgs["result"]["rankingSession"]>
    composites: {}
  }

  type RankingSessionGetPayload<S extends boolean | null | undefined | RankingSessionDefaultArgs> = $Result.GetResult<Prisma.$RankingSessionPayload, S>

  type RankingSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RankingSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RankingSessionCountAggregateInputType | true
    }

  export interface RankingSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RankingSession'], meta: { name: 'RankingSession' } }
    /**
     * Find zero or one RankingSession that matches the filter.
     * @param {RankingSessionFindUniqueArgs} args - Arguments to find a RankingSession
     * @example
     * // Get one RankingSession
     * const rankingSession = await prisma.rankingSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RankingSessionFindUniqueArgs>(args: SelectSubset<T, RankingSessionFindUniqueArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RankingSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RankingSessionFindUniqueOrThrowArgs} args - Arguments to find a RankingSession
     * @example
     * // Get one RankingSession
     * const rankingSession = await prisma.rankingSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RankingSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, RankingSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RankingSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingSessionFindFirstArgs} args - Arguments to find a RankingSession
     * @example
     * // Get one RankingSession
     * const rankingSession = await prisma.rankingSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RankingSessionFindFirstArgs>(args?: SelectSubset<T, RankingSessionFindFirstArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RankingSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingSessionFindFirstOrThrowArgs} args - Arguments to find a RankingSession
     * @example
     * // Get one RankingSession
     * const rankingSession = await prisma.rankingSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RankingSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, RankingSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RankingSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RankingSessions
     * const rankingSessions = await prisma.rankingSession.findMany()
     * 
     * // Get first 10 RankingSessions
     * const rankingSessions = await prisma.rankingSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankingSessionWithIdOnly = await prisma.rankingSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RankingSessionFindManyArgs>(args?: SelectSubset<T, RankingSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RankingSession.
     * @param {RankingSessionCreateArgs} args - Arguments to create a RankingSession.
     * @example
     * // Create one RankingSession
     * const RankingSession = await prisma.rankingSession.create({
     *   data: {
     *     // ... data to create a RankingSession
     *   }
     * })
     * 
     */
    create<T extends RankingSessionCreateArgs>(args: SelectSubset<T, RankingSessionCreateArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RankingSessions.
     * @param {RankingSessionCreateManyArgs} args - Arguments to create many RankingSessions.
     * @example
     * // Create many RankingSessions
     * const rankingSession = await prisma.rankingSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RankingSessionCreateManyArgs>(args?: SelectSubset<T, RankingSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RankingSessions and returns the data saved in the database.
     * @param {RankingSessionCreateManyAndReturnArgs} args - Arguments to create many RankingSessions.
     * @example
     * // Create many RankingSessions
     * const rankingSession = await prisma.rankingSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RankingSessions and only return the `id`
     * const rankingSessionWithIdOnly = await prisma.rankingSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RankingSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, RankingSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RankingSession.
     * @param {RankingSessionDeleteArgs} args - Arguments to delete one RankingSession.
     * @example
     * // Delete one RankingSession
     * const RankingSession = await prisma.rankingSession.delete({
     *   where: {
     *     // ... filter to delete one RankingSession
     *   }
     * })
     * 
     */
    delete<T extends RankingSessionDeleteArgs>(args: SelectSubset<T, RankingSessionDeleteArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RankingSession.
     * @param {RankingSessionUpdateArgs} args - Arguments to update one RankingSession.
     * @example
     * // Update one RankingSession
     * const rankingSession = await prisma.rankingSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RankingSessionUpdateArgs>(args: SelectSubset<T, RankingSessionUpdateArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RankingSessions.
     * @param {RankingSessionDeleteManyArgs} args - Arguments to filter RankingSessions to delete.
     * @example
     * // Delete a few RankingSessions
     * const { count } = await prisma.rankingSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RankingSessionDeleteManyArgs>(args?: SelectSubset<T, RankingSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RankingSessions
     * const rankingSession = await prisma.rankingSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RankingSessionUpdateManyArgs>(args: SelectSubset<T, RankingSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RankingSession.
     * @param {RankingSessionUpsertArgs} args - Arguments to update or create a RankingSession.
     * @example
     * // Update or create a RankingSession
     * const rankingSession = await prisma.rankingSession.upsert({
     *   create: {
     *     // ... data to create a RankingSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RankingSession we want to update
     *   }
     * })
     */
    upsert<T extends RankingSessionUpsertArgs>(args: SelectSubset<T, RankingSessionUpsertArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RankingSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingSessionCountArgs} args - Arguments to filter RankingSessions to count.
     * @example
     * // Count the number of RankingSessions
     * const count = await prisma.rankingSession.count({
     *   where: {
     *     // ... the filter for the RankingSessions we want to count
     *   }
     * })
    **/
    count<T extends RankingSessionCountArgs>(
      args?: Subset<T, RankingSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankingSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RankingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankingSessionAggregateArgs>(args: Subset<T, RankingSessionAggregateArgs>): Prisma.PrismaPromise<GetRankingSessionAggregateType<T>>

    /**
     * Group by RankingSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankingSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankingSessionGroupByArgs['orderBy'] }
        : { orderBy?: RankingSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankingSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankingSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RankingSession model
   */
  readonly fields: RankingSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RankingSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankingSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends RankingSession$itemsArgs<ExtArgs> = {}>(args?: Subset<T, RankingSession$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RankingSession model
   */ 
  interface RankingSessionFieldRefs {
    readonly id: FieldRef<"RankingSession", 'Int'>
    readonly userId: FieldRef<"RankingSession", 'Int'>
    readonly albumId: FieldRef<"RankingSession", 'Int'>
    readonly createdAt: FieldRef<"RankingSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RankingSession findUnique
   */
  export type RankingSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * Filter, which RankingSession to fetch.
     */
    where: RankingSessionWhereUniqueInput
  }

  /**
   * RankingSession findUniqueOrThrow
   */
  export type RankingSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * Filter, which RankingSession to fetch.
     */
    where: RankingSessionWhereUniqueInput
  }

  /**
   * RankingSession findFirst
   */
  export type RankingSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * Filter, which RankingSession to fetch.
     */
    where?: RankingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingSessions to fetch.
     */
    orderBy?: RankingSessionOrderByWithRelationInput | RankingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingSessions.
     */
    cursor?: RankingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingSessions.
     */
    distinct?: RankingSessionScalarFieldEnum | RankingSessionScalarFieldEnum[]
  }

  /**
   * RankingSession findFirstOrThrow
   */
  export type RankingSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * Filter, which RankingSession to fetch.
     */
    where?: RankingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingSessions to fetch.
     */
    orderBy?: RankingSessionOrderByWithRelationInput | RankingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingSessions.
     */
    cursor?: RankingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingSessions.
     */
    distinct?: RankingSessionScalarFieldEnum | RankingSessionScalarFieldEnum[]
  }

  /**
   * RankingSession findMany
   */
  export type RankingSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * Filter, which RankingSessions to fetch.
     */
    where?: RankingSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingSessions to fetch.
     */
    orderBy?: RankingSessionOrderByWithRelationInput | RankingSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RankingSessions.
     */
    cursor?: RankingSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingSessions.
     */
    skip?: number
    distinct?: RankingSessionScalarFieldEnum | RankingSessionScalarFieldEnum[]
  }

  /**
   * RankingSession create
   */
  export type RankingSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a RankingSession.
     */
    data: XOR<RankingSessionCreateInput, RankingSessionUncheckedCreateInput>
  }

  /**
   * RankingSession createMany
   */
  export type RankingSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RankingSessions.
     */
    data: RankingSessionCreateManyInput | RankingSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RankingSession createManyAndReturn
   */
  export type RankingSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RankingSessions.
     */
    data: RankingSessionCreateManyInput | RankingSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingSession update
   */
  export type RankingSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a RankingSession.
     */
    data: XOR<RankingSessionUpdateInput, RankingSessionUncheckedUpdateInput>
    /**
     * Choose, which RankingSession to update.
     */
    where: RankingSessionWhereUniqueInput
  }

  /**
   * RankingSession updateMany
   */
  export type RankingSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RankingSessions.
     */
    data: XOR<RankingSessionUpdateManyMutationInput, RankingSessionUncheckedUpdateManyInput>
    /**
     * Filter which RankingSessions to update
     */
    where?: RankingSessionWhereInput
  }

  /**
   * RankingSession upsert
   */
  export type RankingSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the RankingSession to update in case it exists.
     */
    where: RankingSessionWhereUniqueInput
    /**
     * In case the RankingSession found by the `where` argument doesn't exist, create a new RankingSession with this data.
     */
    create: XOR<RankingSessionCreateInput, RankingSessionUncheckedCreateInput>
    /**
     * In case the RankingSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankingSessionUpdateInput, RankingSessionUncheckedUpdateInput>
  }

  /**
   * RankingSession delete
   */
  export type RankingSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
    /**
     * Filter which RankingSession to delete.
     */
    where: RankingSessionWhereUniqueInput
  }

  /**
   * RankingSession deleteMany
   */
  export type RankingSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingSessions to delete
     */
    where?: RankingSessionWhereInput
  }

  /**
   * RankingSession.items
   */
  export type RankingSession$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    where?: RankingItemWhereInput
    orderBy?: RankingItemOrderByWithRelationInput | RankingItemOrderByWithRelationInput[]
    cursor?: RankingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RankingItemScalarFieldEnum | RankingItemScalarFieldEnum[]
  }

  /**
   * RankingSession without action
   */
  export type RankingSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingSession
     */
    select?: RankingSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingSessionInclude<ExtArgs> | null
  }


  /**
   * Model RankingItem
   */

  export type AggregateRankingItem = {
    _count: RankingItemCountAggregateOutputType | null
    _avg: RankingItemAvgAggregateOutputType | null
    _sum: RankingItemSumAggregateOutputType | null
    _min: RankingItemMinAggregateOutputType | null
    _max: RankingItemMaxAggregateOutputType | null
  }

  export type RankingItemAvgAggregateOutputType = {
    id: number | null
    rankingSessionId: number | null
    songId: number | null
    position: number | null
  }

  export type RankingItemSumAggregateOutputType = {
    id: number | null
    rankingSessionId: number | null
    songId: number | null
    position: number | null
  }

  export type RankingItemMinAggregateOutputType = {
    id: number | null
    rankingSessionId: number | null
    songId: number | null
    position: number | null
  }

  export type RankingItemMaxAggregateOutputType = {
    id: number | null
    rankingSessionId: number | null
    songId: number | null
    position: number | null
  }

  export type RankingItemCountAggregateOutputType = {
    id: number
    rankingSessionId: number
    songId: number
    position: number
    _all: number
  }


  export type RankingItemAvgAggregateInputType = {
    id?: true
    rankingSessionId?: true
    songId?: true
    position?: true
  }

  export type RankingItemSumAggregateInputType = {
    id?: true
    rankingSessionId?: true
    songId?: true
    position?: true
  }

  export type RankingItemMinAggregateInputType = {
    id?: true
    rankingSessionId?: true
    songId?: true
    position?: true
  }

  export type RankingItemMaxAggregateInputType = {
    id?: true
    rankingSessionId?: true
    songId?: true
    position?: true
  }

  export type RankingItemCountAggregateInputType = {
    id?: true
    rankingSessionId?: true
    songId?: true
    position?: true
    _all?: true
  }

  export type RankingItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingItem to aggregate.
     */
    where?: RankingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingItems to fetch.
     */
    orderBy?: RankingItemOrderByWithRelationInput | RankingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RankingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RankingItems
    **/
    _count?: true | RankingItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RankingItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RankingItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RankingItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RankingItemMaxAggregateInputType
  }

  export type GetRankingItemAggregateType<T extends RankingItemAggregateArgs> = {
        [P in keyof T & keyof AggregateRankingItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRankingItem[P]>
      : GetScalarType<T[P], AggregateRankingItem[P]>
  }




  export type RankingItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RankingItemWhereInput
    orderBy?: RankingItemOrderByWithAggregationInput | RankingItemOrderByWithAggregationInput[]
    by: RankingItemScalarFieldEnum[] | RankingItemScalarFieldEnum
    having?: RankingItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RankingItemCountAggregateInputType | true
    _avg?: RankingItemAvgAggregateInputType
    _sum?: RankingItemSumAggregateInputType
    _min?: RankingItemMinAggregateInputType
    _max?: RankingItemMaxAggregateInputType
  }

  export type RankingItemGroupByOutputType = {
    id: number
    rankingSessionId: number
    songId: number
    position: number
    _count: RankingItemCountAggregateOutputType | null
    _avg: RankingItemAvgAggregateOutputType | null
    _sum: RankingItemSumAggregateOutputType | null
    _min: RankingItemMinAggregateOutputType | null
    _max: RankingItemMaxAggregateOutputType | null
  }

  type GetRankingItemGroupByPayload<T extends RankingItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RankingItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RankingItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RankingItemGroupByOutputType[P]>
            : GetScalarType<T[P], RankingItemGroupByOutputType[P]>
        }
      >
    >


  export type RankingItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rankingSessionId?: boolean
    songId?: boolean
    position?: boolean
    session?: boolean | RankingSessionDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingItem"]>

  export type RankingItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rankingSessionId?: boolean
    songId?: boolean
    position?: boolean
    session?: boolean | RankingSessionDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rankingItem"]>

  export type RankingItemSelectScalar = {
    id?: boolean
    rankingSessionId?: boolean
    songId?: boolean
    position?: boolean
  }

  export type RankingItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | RankingSessionDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }
  export type RankingItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | RankingSessionDefaultArgs<ExtArgs>
    song?: boolean | SongDefaultArgs<ExtArgs>
  }

  export type $RankingItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RankingItem"
    objects: {
      session: Prisma.$RankingSessionPayload<ExtArgs>
      song: Prisma.$SongPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rankingSessionId: number
      songId: number
      position: number
    }, ExtArgs["result"]["rankingItem"]>
    composites: {}
  }

  type RankingItemGetPayload<S extends boolean | null | undefined | RankingItemDefaultArgs> = $Result.GetResult<Prisma.$RankingItemPayload, S>

  type RankingItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RankingItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RankingItemCountAggregateInputType | true
    }

  export interface RankingItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RankingItem'], meta: { name: 'RankingItem' } }
    /**
     * Find zero or one RankingItem that matches the filter.
     * @param {RankingItemFindUniqueArgs} args - Arguments to find a RankingItem
     * @example
     * // Get one RankingItem
     * const rankingItem = await prisma.rankingItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RankingItemFindUniqueArgs>(args: SelectSubset<T, RankingItemFindUniqueArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RankingItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RankingItemFindUniqueOrThrowArgs} args - Arguments to find a RankingItem
     * @example
     * // Get one RankingItem
     * const rankingItem = await prisma.rankingItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RankingItemFindUniqueOrThrowArgs>(args: SelectSubset<T, RankingItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RankingItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingItemFindFirstArgs} args - Arguments to find a RankingItem
     * @example
     * // Get one RankingItem
     * const rankingItem = await prisma.rankingItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RankingItemFindFirstArgs>(args?: SelectSubset<T, RankingItemFindFirstArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RankingItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingItemFindFirstOrThrowArgs} args - Arguments to find a RankingItem
     * @example
     * // Get one RankingItem
     * const rankingItem = await prisma.rankingItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RankingItemFindFirstOrThrowArgs>(args?: SelectSubset<T, RankingItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RankingItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RankingItems
     * const rankingItems = await prisma.rankingItem.findMany()
     * 
     * // Get first 10 RankingItems
     * const rankingItems = await prisma.rankingItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rankingItemWithIdOnly = await prisma.rankingItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RankingItemFindManyArgs>(args?: SelectSubset<T, RankingItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RankingItem.
     * @param {RankingItemCreateArgs} args - Arguments to create a RankingItem.
     * @example
     * // Create one RankingItem
     * const RankingItem = await prisma.rankingItem.create({
     *   data: {
     *     // ... data to create a RankingItem
     *   }
     * })
     * 
     */
    create<T extends RankingItemCreateArgs>(args: SelectSubset<T, RankingItemCreateArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RankingItems.
     * @param {RankingItemCreateManyArgs} args - Arguments to create many RankingItems.
     * @example
     * // Create many RankingItems
     * const rankingItem = await prisma.rankingItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RankingItemCreateManyArgs>(args?: SelectSubset<T, RankingItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RankingItems and returns the data saved in the database.
     * @param {RankingItemCreateManyAndReturnArgs} args - Arguments to create many RankingItems.
     * @example
     * // Create many RankingItems
     * const rankingItem = await prisma.rankingItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RankingItems and only return the `id`
     * const rankingItemWithIdOnly = await prisma.rankingItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RankingItemCreateManyAndReturnArgs>(args?: SelectSubset<T, RankingItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RankingItem.
     * @param {RankingItemDeleteArgs} args - Arguments to delete one RankingItem.
     * @example
     * // Delete one RankingItem
     * const RankingItem = await prisma.rankingItem.delete({
     *   where: {
     *     // ... filter to delete one RankingItem
     *   }
     * })
     * 
     */
    delete<T extends RankingItemDeleteArgs>(args: SelectSubset<T, RankingItemDeleteArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RankingItem.
     * @param {RankingItemUpdateArgs} args - Arguments to update one RankingItem.
     * @example
     * // Update one RankingItem
     * const rankingItem = await prisma.rankingItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RankingItemUpdateArgs>(args: SelectSubset<T, RankingItemUpdateArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RankingItems.
     * @param {RankingItemDeleteManyArgs} args - Arguments to filter RankingItems to delete.
     * @example
     * // Delete a few RankingItems
     * const { count } = await prisma.rankingItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RankingItemDeleteManyArgs>(args?: SelectSubset<T, RankingItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RankingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RankingItems
     * const rankingItem = await prisma.rankingItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RankingItemUpdateManyArgs>(args: SelectSubset<T, RankingItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RankingItem.
     * @param {RankingItemUpsertArgs} args - Arguments to update or create a RankingItem.
     * @example
     * // Update or create a RankingItem
     * const rankingItem = await prisma.rankingItem.upsert({
     *   create: {
     *     // ... data to create a RankingItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RankingItem we want to update
     *   }
     * })
     */
    upsert<T extends RankingItemUpsertArgs>(args: SelectSubset<T, RankingItemUpsertArgs<ExtArgs>>): Prisma__RankingItemClient<$Result.GetResult<Prisma.$RankingItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RankingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingItemCountArgs} args - Arguments to filter RankingItems to count.
     * @example
     * // Count the number of RankingItems
     * const count = await prisma.rankingItem.count({
     *   where: {
     *     // ... the filter for the RankingItems we want to count
     *   }
     * })
    **/
    count<T extends RankingItemCountArgs>(
      args?: Subset<T, RankingItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RankingItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RankingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RankingItemAggregateArgs>(args: Subset<T, RankingItemAggregateArgs>): Prisma.PrismaPromise<GetRankingItemAggregateType<T>>

    /**
     * Group by RankingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RankingItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RankingItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RankingItemGroupByArgs['orderBy'] }
        : { orderBy?: RankingItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RankingItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRankingItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RankingItem model
   */
  readonly fields: RankingItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RankingItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RankingItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends RankingSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RankingSessionDefaultArgs<ExtArgs>>): Prisma__RankingSessionClient<$Result.GetResult<Prisma.$RankingSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    song<T extends SongDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SongDefaultArgs<ExtArgs>>): Prisma__SongClient<$Result.GetResult<Prisma.$SongPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RankingItem model
   */ 
  interface RankingItemFieldRefs {
    readonly id: FieldRef<"RankingItem", 'Int'>
    readonly rankingSessionId: FieldRef<"RankingItem", 'Int'>
    readonly songId: FieldRef<"RankingItem", 'Int'>
    readonly position: FieldRef<"RankingItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RankingItem findUnique
   */
  export type RankingItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * Filter, which RankingItem to fetch.
     */
    where: RankingItemWhereUniqueInput
  }

  /**
   * RankingItem findUniqueOrThrow
   */
  export type RankingItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * Filter, which RankingItem to fetch.
     */
    where: RankingItemWhereUniqueInput
  }

  /**
   * RankingItem findFirst
   */
  export type RankingItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * Filter, which RankingItem to fetch.
     */
    where?: RankingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingItems to fetch.
     */
    orderBy?: RankingItemOrderByWithRelationInput | RankingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingItems.
     */
    cursor?: RankingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingItems.
     */
    distinct?: RankingItemScalarFieldEnum | RankingItemScalarFieldEnum[]
  }

  /**
   * RankingItem findFirstOrThrow
   */
  export type RankingItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * Filter, which RankingItem to fetch.
     */
    where?: RankingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingItems to fetch.
     */
    orderBy?: RankingItemOrderByWithRelationInput | RankingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RankingItems.
     */
    cursor?: RankingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RankingItems.
     */
    distinct?: RankingItemScalarFieldEnum | RankingItemScalarFieldEnum[]
  }

  /**
   * RankingItem findMany
   */
  export type RankingItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * Filter, which RankingItems to fetch.
     */
    where?: RankingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RankingItems to fetch.
     */
    orderBy?: RankingItemOrderByWithRelationInput | RankingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RankingItems.
     */
    cursor?: RankingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RankingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RankingItems.
     */
    skip?: number
    distinct?: RankingItemScalarFieldEnum | RankingItemScalarFieldEnum[]
  }

  /**
   * RankingItem create
   */
  export type RankingItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * The data needed to create a RankingItem.
     */
    data: XOR<RankingItemCreateInput, RankingItemUncheckedCreateInput>
  }

  /**
   * RankingItem createMany
   */
  export type RankingItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RankingItems.
     */
    data: RankingItemCreateManyInput | RankingItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RankingItem createManyAndReturn
   */
  export type RankingItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RankingItems.
     */
    data: RankingItemCreateManyInput | RankingItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RankingItem update
   */
  export type RankingItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * The data needed to update a RankingItem.
     */
    data: XOR<RankingItemUpdateInput, RankingItemUncheckedUpdateInput>
    /**
     * Choose, which RankingItem to update.
     */
    where: RankingItemWhereUniqueInput
  }

  /**
   * RankingItem updateMany
   */
  export type RankingItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RankingItems.
     */
    data: XOR<RankingItemUpdateManyMutationInput, RankingItemUncheckedUpdateManyInput>
    /**
     * Filter which RankingItems to update
     */
    where?: RankingItemWhereInput
  }

  /**
   * RankingItem upsert
   */
  export type RankingItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * The filter to search for the RankingItem to update in case it exists.
     */
    where: RankingItemWhereUniqueInput
    /**
     * In case the RankingItem found by the `where` argument doesn't exist, create a new RankingItem with this data.
     */
    create: XOR<RankingItemCreateInput, RankingItemUncheckedCreateInput>
    /**
     * In case the RankingItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RankingItemUpdateInput, RankingItemUncheckedUpdateInput>
  }

  /**
   * RankingItem delete
   */
  export type RankingItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
    /**
     * Filter which RankingItem to delete.
     */
    where: RankingItemWhereUniqueInput
  }

  /**
   * RankingItem deleteMany
   */
  export type RankingItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RankingItems to delete
     */
    where?: RankingItemWhereInput
  }

  /**
   * RankingItem without action
   */
  export type RankingItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RankingItem
     */
    select?: RankingItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RankingItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AlbumScalarFieldEnum: {
    id: 'id',
    title: 'title',
    artist: 'artist',
    spotifyId: 'spotifyId',
    coverUrl: 'coverUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const SongScalarFieldEnum: {
    id: 'id',
    title: 'title',
    trackNumber: 'trackNumber',
    spotifyId: 'spotifyId',
    albumId: 'albumId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SongScalarFieldEnum = (typeof SongScalarFieldEnum)[keyof typeof SongScalarFieldEnum]


  export const AlbumRatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    albumId: 'albumId',
    stars: 'stars',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AlbumRatingScalarFieldEnum = (typeof AlbumRatingScalarFieldEnum)[keyof typeof AlbumRatingScalarFieldEnum]


  export const RankingSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    albumId: 'albumId',
    createdAt: 'createdAt'
  };

  export type RankingSessionScalarFieldEnum = (typeof RankingSessionScalarFieldEnum)[keyof typeof RankingSessionScalarFieldEnum]


  export const RankingItemScalarFieldEnum: {
    id: 'id',
    rankingSessionId: 'rankingSessionId',
    songId: 'songId',
    position: 'position'
  };

  export type RankingItemScalarFieldEnum = (typeof RankingItemScalarFieldEnum)[keyof typeof RankingItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    rankings?: RankingSessionListRelationFilter
    ratings?: AlbumRatingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rankings?: RankingSessionOrderByRelationAggregateInput
    ratings?: AlbumRatingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    rankings?: RankingSessionListRelationFilter
    ratings?: AlbumRatingListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AlbumWhereInput = {
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    id?: IntFilter<"Album"> | number
    title?: StringFilter<"Album"> | string
    artist?: StringNullableFilter<"Album"> | string | null
    spotifyId?: StringNullableFilter<"Album"> | string | null
    coverUrl?: StringNullableFilter<"Album"> | string | null
    createdAt?: DateTimeFilter<"Album"> | Date | string
    updatedAt?: DateTimeFilter<"Album"> | Date | string
    songs?: SongListRelationFilter
    ratings?: AlbumRatingListRelationFilter
    rankings?: RankingSessionListRelationFilter
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrderInput | SortOrder
    spotifyId?: SortOrderInput | SortOrder
    coverUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    songs?: SongOrderByRelationAggregateInput
    ratings?: AlbumRatingOrderByRelationAggregateInput
    rankings?: RankingSessionOrderByRelationAggregateInput
  }

  export type AlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    spotifyId?: string
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    title?: StringFilter<"Album"> | string
    artist?: StringNullableFilter<"Album"> | string | null
    coverUrl?: StringNullableFilter<"Album"> | string | null
    createdAt?: DateTimeFilter<"Album"> | Date | string
    updatedAt?: DateTimeFilter<"Album"> | Date | string
    songs?: SongListRelationFilter
    ratings?: AlbumRatingListRelationFilter
    rankings?: RankingSessionListRelationFilter
  }, "id" | "spotifyId">

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrderInput | SortOrder
    spotifyId?: SortOrderInput | SortOrder
    coverUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _avg?: AlbumAvgOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
    _sum?: AlbumSumOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    OR?: AlbumScalarWhereWithAggregatesInput[]
    NOT?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Album"> | number
    title?: StringWithAggregatesFilter<"Album"> | string
    artist?: StringNullableWithAggregatesFilter<"Album"> | string | null
    spotifyId?: StringNullableWithAggregatesFilter<"Album"> | string | null
    coverUrl?: StringNullableWithAggregatesFilter<"Album"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Album"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Album"> | Date | string
  }

  export type SongWhereInput = {
    AND?: SongWhereInput | SongWhereInput[]
    OR?: SongWhereInput[]
    NOT?: SongWhereInput | SongWhereInput[]
    id?: IntFilter<"Song"> | number
    title?: StringFilter<"Song"> | string
    trackNumber?: IntNullableFilter<"Song"> | number | null
    spotifyId?: StringNullableFilter<"Song"> | string | null
    albumId?: IntFilter<"Song"> | number
    createdAt?: DateTimeFilter<"Song"> | Date | string
    updatedAt?: DateTimeFilter<"Song"> | Date | string
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
    rankingItems?: RankingItemListRelationFilter
  }

  export type SongOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    trackNumber?: SortOrderInput | SortOrder
    spotifyId?: SortOrderInput | SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    album?: AlbumOrderByWithRelationInput
    rankingItems?: RankingItemOrderByRelationAggregateInput
  }

  export type SongWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    spotifyId?: string
    AND?: SongWhereInput | SongWhereInput[]
    OR?: SongWhereInput[]
    NOT?: SongWhereInput | SongWhereInput[]
    title?: StringFilter<"Song"> | string
    trackNumber?: IntNullableFilter<"Song"> | number | null
    albumId?: IntFilter<"Song"> | number
    createdAt?: DateTimeFilter<"Song"> | Date | string
    updatedAt?: DateTimeFilter<"Song"> | Date | string
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
    rankingItems?: RankingItemListRelationFilter
  }, "id" | "spotifyId">

  export type SongOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    trackNumber?: SortOrderInput | SortOrder
    spotifyId?: SortOrderInput | SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SongCountOrderByAggregateInput
    _avg?: SongAvgOrderByAggregateInput
    _max?: SongMaxOrderByAggregateInput
    _min?: SongMinOrderByAggregateInput
    _sum?: SongSumOrderByAggregateInput
  }

  export type SongScalarWhereWithAggregatesInput = {
    AND?: SongScalarWhereWithAggregatesInput | SongScalarWhereWithAggregatesInput[]
    OR?: SongScalarWhereWithAggregatesInput[]
    NOT?: SongScalarWhereWithAggregatesInput | SongScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Song"> | number
    title?: StringWithAggregatesFilter<"Song"> | string
    trackNumber?: IntNullableWithAggregatesFilter<"Song"> | number | null
    spotifyId?: StringNullableWithAggregatesFilter<"Song"> | string | null
    albumId?: IntWithAggregatesFilter<"Song"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Song"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Song"> | Date | string
  }

  export type AlbumRatingWhereInput = {
    AND?: AlbumRatingWhereInput | AlbumRatingWhereInput[]
    OR?: AlbumRatingWhereInput[]
    NOT?: AlbumRatingWhereInput | AlbumRatingWhereInput[]
    id?: IntFilter<"AlbumRating"> | number
    userId?: IntFilter<"AlbumRating"> | number
    albumId?: IntFilter<"AlbumRating"> | number
    stars?: IntFilter<"AlbumRating"> | number
    createdAt?: DateTimeFilter<"AlbumRating"> | Date | string
    updatedAt?: DateTimeFilter<"AlbumRating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
  }

  export type AlbumRatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    stars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    album?: AlbumOrderByWithRelationInput
  }

  export type AlbumRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_albumId?: AlbumRatingUserIdAlbumIdCompoundUniqueInput
    AND?: AlbumRatingWhereInput | AlbumRatingWhereInput[]
    OR?: AlbumRatingWhereInput[]
    NOT?: AlbumRatingWhereInput | AlbumRatingWhereInput[]
    userId?: IntFilter<"AlbumRating"> | number
    albumId?: IntFilter<"AlbumRating"> | number
    stars?: IntFilter<"AlbumRating"> | number
    createdAt?: DateTimeFilter<"AlbumRating"> | Date | string
    updatedAt?: DateTimeFilter<"AlbumRating"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
  }, "id" | "userId_albumId">

  export type AlbumRatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    stars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AlbumRatingCountOrderByAggregateInput
    _avg?: AlbumRatingAvgOrderByAggregateInput
    _max?: AlbumRatingMaxOrderByAggregateInput
    _min?: AlbumRatingMinOrderByAggregateInput
    _sum?: AlbumRatingSumOrderByAggregateInput
  }

  export type AlbumRatingScalarWhereWithAggregatesInput = {
    AND?: AlbumRatingScalarWhereWithAggregatesInput | AlbumRatingScalarWhereWithAggregatesInput[]
    OR?: AlbumRatingScalarWhereWithAggregatesInput[]
    NOT?: AlbumRatingScalarWhereWithAggregatesInput | AlbumRatingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AlbumRating"> | number
    userId?: IntWithAggregatesFilter<"AlbumRating"> | number
    albumId?: IntWithAggregatesFilter<"AlbumRating"> | number
    stars?: IntWithAggregatesFilter<"AlbumRating"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AlbumRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AlbumRating"> | Date | string
  }

  export type RankingSessionWhereInput = {
    AND?: RankingSessionWhereInput | RankingSessionWhereInput[]
    OR?: RankingSessionWhereInput[]
    NOT?: RankingSessionWhereInput | RankingSessionWhereInput[]
    id?: IntFilter<"RankingSession"> | number
    userId?: IntFilter<"RankingSession"> | number
    albumId?: IntFilter<"RankingSession"> | number
    createdAt?: DateTimeFilter<"RankingSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
    items?: RankingItemListRelationFilter
  }

  export type RankingSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    album?: AlbumOrderByWithRelationInput
    items?: RankingItemOrderByRelationAggregateInput
  }

  export type RankingSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_albumId_createdAt?: RankingSessionUserIdAlbumIdCreatedAtCompoundUniqueInput
    AND?: RankingSessionWhereInput | RankingSessionWhereInput[]
    OR?: RankingSessionWhereInput[]
    NOT?: RankingSessionWhereInput | RankingSessionWhereInput[]
    userId?: IntFilter<"RankingSession"> | number
    albumId?: IntFilter<"RankingSession"> | number
    createdAt?: DateTimeFilter<"RankingSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    album?: XOR<AlbumRelationFilter, AlbumWhereInput>
    items?: RankingItemListRelationFilter
  }, "id" | "userId_albumId_createdAt">

  export type RankingSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
    _count?: RankingSessionCountOrderByAggregateInput
    _avg?: RankingSessionAvgOrderByAggregateInput
    _max?: RankingSessionMaxOrderByAggregateInput
    _min?: RankingSessionMinOrderByAggregateInput
    _sum?: RankingSessionSumOrderByAggregateInput
  }

  export type RankingSessionScalarWhereWithAggregatesInput = {
    AND?: RankingSessionScalarWhereWithAggregatesInput | RankingSessionScalarWhereWithAggregatesInput[]
    OR?: RankingSessionScalarWhereWithAggregatesInput[]
    NOT?: RankingSessionScalarWhereWithAggregatesInput | RankingSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RankingSession"> | number
    userId?: IntWithAggregatesFilter<"RankingSession"> | number
    albumId?: IntWithAggregatesFilter<"RankingSession"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RankingSession"> | Date | string
  }

  export type RankingItemWhereInput = {
    AND?: RankingItemWhereInput | RankingItemWhereInput[]
    OR?: RankingItemWhereInput[]
    NOT?: RankingItemWhereInput | RankingItemWhereInput[]
    id?: IntFilter<"RankingItem"> | number
    rankingSessionId?: IntFilter<"RankingItem"> | number
    songId?: IntFilter<"RankingItem"> | number
    position?: IntFilter<"RankingItem"> | number
    session?: XOR<RankingSessionRelationFilter, RankingSessionWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }

  export type RankingItemOrderByWithRelationInput = {
    id?: SortOrder
    rankingSessionId?: SortOrder
    songId?: SortOrder
    position?: SortOrder
    session?: RankingSessionOrderByWithRelationInput
    song?: SongOrderByWithRelationInput
  }

  export type RankingItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    rankingSessionId_songId?: RankingItemRankingSessionIdSongIdCompoundUniqueInput
    rankingSessionId_position?: RankingItemRankingSessionIdPositionCompoundUniqueInput
    AND?: RankingItemWhereInput | RankingItemWhereInput[]
    OR?: RankingItemWhereInput[]
    NOT?: RankingItemWhereInput | RankingItemWhereInput[]
    rankingSessionId?: IntFilter<"RankingItem"> | number
    songId?: IntFilter<"RankingItem"> | number
    position?: IntFilter<"RankingItem"> | number
    session?: XOR<RankingSessionRelationFilter, RankingSessionWhereInput>
    song?: XOR<SongRelationFilter, SongWhereInput>
  }, "id" | "rankingSessionId_songId" | "rankingSessionId_position">

  export type RankingItemOrderByWithAggregationInput = {
    id?: SortOrder
    rankingSessionId?: SortOrder
    songId?: SortOrder
    position?: SortOrder
    _count?: RankingItemCountOrderByAggregateInput
    _avg?: RankingItemAvgOrderByAggregateInput
    _max?: RankingItemMaxOrderByAggregateInput
    _min?: RankingItemMinOrderByAggregateInput
    _sum?: RankingItemSumOrderByAggregateInput
  }

  export type RankingItemScalarWhereWithAggregatesInput = {
    AND?: RankingItemScalarWhereWithAggregatesInput | RankingItemScalarWhereWithAggregatesInput[]
    OR?: RankingItemScalarWhereWithAggregatesInput[]
    NOT?: RankingItemScalarWhereWithAggregatesInput | RankingItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RankingItem"> | number
    rankingSessionId?: IntWithAggregatesFilter<"RankingItem"> | number
    songId?: IntWithAggregatesFilter<"RankingItem"> | number
    position?: IntWithAggregatesFilter<"RankingItem"> | number
  }

  export type UserCreateInput = {
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    rankings?: RankingSessionCreateNestedManyWithoutUserInput
    ratings?: AlbumRatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    rankings?: RankingSessionUncheckedCreateNestedManyWithoutUserInput
    ratings?: AlbumRatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankings?: RankingSessionUpdateManyWithoutUserNestedInput
    ratings?: AlbumRatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankings?: RankingSessionUncheckedUpdateManyWithoutUserNestedInput
    ratings?: AlbumRatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumCreateInput = {
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: SongCreateNestedManyWithoutAlbumInput
    ratings?: AlbumRatingCreateNestedManyWithoutAlbumInput
    rankings?: RankingSessionCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: number
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: SongUncheckedCreateNestedManyWithoutAlbumInput
    ratings?: AlbumRatingUncheckedCreateNestedManyWithoutAlbumInput
    rankings?: RankingSessionUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: SongUpdateManyWithoutAlbumNestedInput
    ratings?: AlbumRatingUpdateManyWithoutAlbumNestedInput
    rankings?: RankingSessionUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: SongUncheckedUpdateManyWithoutAlbumNestedInput
    ratings?: AlbumRatingUncheckedUpdateManyWithoutAlbumNestedInput
    rankings?: RankingSessionUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: number
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongCreateInput = {
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    album: AlbumCreateNestedOneWithoutSongsInput
    rankingItems?: RankingItemCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateInput = {
    id?: number
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    albumId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rankingItems?: RankingItemUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    album?: AlbumUpdateOneRequiredWithoutSongsNestedInput
    rankingItems?: RankingItemUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingItems?: RankingItemUncheckedUpdateManyWithoutSongNestedInput
  }

  export type SongCreateManyInput = {
    id?: number
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    albumId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SongUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumRatingCreateInput = {
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsInput
    album: AlbumCreateNestedOneWithoutRatingsInput
  }

  export type AlbumRatingUncheckedCreateInput = {
    id?: number
    userId: number
    albumId: number
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumRatingUpdateInput = {
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
    album?: AlbumUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type AlbumRatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumRatingCreateManyInput = {
    id?: number
    userId: number
    albumId: number
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumRatingUpdateManyMutationInput = {
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumRatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingSessionCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRankingsInput
    album: AlbumCreateNestedOneWithoutRankingsInput
    items?: RankingItemCreateNestedManyWithoutSessionInput
  }

  export type RankingSessionUncheckedCreateInput = {
    id?: number
    userId: number
    albumId: number
    createdAt?: Date | string
    items?: RankingItemUncheckedCreateNestedManyWithoutSessionInput
  }

  export type RankingSessionUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRankingsNestedInput
    album?: AlbumUpdateOneRequiredWithoutRankingsNestedInput
    items?: RankingItemUpdateManyWithoutSessionNestedInput
  }

  export type RankingSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: RankingItemUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type RankingSessionCreateManyInput = {
    id?: number
    userId: number
    albumId: number
    createdAt?: Date | string
  }

  export type RankingSessionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingItemCreateInput = {
    position: number
    session: RankingSessionCreateNestedOneWithoutItemsInput
    song: SongCreateNestedOneWithoutRankingItemsInput
  }

  export type RankingItemUncheckedCreateInput = {
    id?: number
    rankingSessionId: number
    songId: number
    position: number
  }

  export type RankingItemUpdateInput = {
    position?: IntFieldUpdateOperationsInput | number
    session?: RankingSessionUpdateOneRequiredWithoutItemsNestedInput
    song?: SongUpdateOneRequiredWithoutRankingItemsNestedInput
  }

  export type RankingItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rankingSessionId?: IntFieldUpdateOperationsInput | number
    songId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankingItemCreateManyInput = {
    id?: number
    rankingSessionId: number
    songId: number
    position: number
  }

  export type RankingItemUpdateManyMutationInput = {
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankingItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rankingSessionId?: IntFieldUpdateOperationsInput | number
    songId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RankingSessionListRelationFilter = {
    every?: RankingSessionWhereInput
    some?: RankingSessionWhereInput
    none?: RankingSessionWhereInput
  }

  export type AlbumRatingListRelationFilter = {
    every?: AlbumRatingWhereInput
    some?: AlbumRatingWhereInput
    none?: AlbumRatingWhereInput
  }

  export type RankingSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SongListRelationFilter = {
    every?: SongWhereInput
    some?: SongWhereInput
    none?: SongWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SongOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    spotifyId?: SortOrder
    coverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    spotifyId?: SortOrder
    coverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    artist?: SortOrder
    spotifyId?: SortOrder
    coverUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AlbumRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type RankingItemListRelationFilter = {
    every?: RankingItemWhereInput
    some?: RankingItemWhereInput
    none?: RankingItemWhereInput
  }

  export type RankingItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SongCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    trackNumber?: SortOrder
    spotifyId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SongAvgOrderByAggregateInput = {
    id?: SortOrder
    trackNumber?: SortOrder
    albumId?: SortOrder
  }

  export type SongMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    trackNumber?: SortOrder
    spotifyId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SongMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    trackNumber?: SortOrder
    spotifyId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SongSumOrderByAggregateInput = {
    id?: SortOrder
    trackNumber?: SortOrder
    albumId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AlbumRatingUserIdAlbumIdCompoundUniqueInput = {
    userId: number
    albumId: number
  }

  export type AlbumRatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    stars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumRatingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    stars?: SortOrder
  }

  export type AlbumRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    stars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumRatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    stars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AlbumRatingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    stars?: SortOrder
  }

  export type RankingSessionUserIdAlbumIdCreatedAtCompoundUniqueInput = {
    userId: number
    albumId: number
    createdAt: Date | string
  }

  export type RankingSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
  }

  export type RankingSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
  }

  export type RankingSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
  }

  export type RankingSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
    createdAt?: SortOrder
  }

  export type RankingSessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    albumId?: SortOrder
  }

  export type RankingSessionRelationFilter = {
    is?: RankingSessionWhereInput
    isNot?: RankingSessionWhereInput
  }

  export type SongRelationFilter = {
    is?: SongWhereInput
    isNot?: SongWhereInput
  }

  export type RankingItemRankingSessionIdSongIdCompoundUniqueInput = {
    rankingSessionId: number
    songId: number
  }

  export type RankingItemRankingSessionIdPositionCompoundUniqueInput = {
    rankingSessionId: number
    position: number
  }

  export type RankingItemCountOrderByAggregateInput = {
    id?: SortOrder
    rankingSessionId?: SortOrder
    songId?: SortOrder
    position?: SortOrder
  }

  export type RankingItemAvgOrderByAggregateInput = {
    id?: SortOrder
    rankingSessionId?: SortOrder
    songId?: SortOrder
    position?: SortOrder
  }

  export type RankingItemMaxOrderByAggregateInput = {
    id?: SortOrder
    rankingSessionId?: SortOrder
    songId?: SortOrder
    position?: SortOrder
  }

  export type RankingItemMinOrderByAggregateInput = {
    id?: SortOrder
    rankingSessionId?: SortOrder
    songId?: SortOrder
    position?: SortOrder
  }

  export type RankingItemSumOrderByAggregateInput = {
    id?: SortOrder
    rankingSessionId?: SortOrder
    songId?: SortOrder
    position?: SortOrder
  }

  export type RankingSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<RankingSessionCreateWithoutUserInput, RankingSessionUncheckedCreateWithoutUserInput> | RankingSessionCreateWithoutUserInput[] | RankingSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutUserInput | RankingSessionCreateOrConnectWithoutUserInput[]
    createMany?: RankingSessionCreateManyUserInputEnvelope
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
  }

  export type AlbumRatingCreateNestedManyWithoutUserInput = {
    create?: XOR<AlbumRatingCreateWithoutUserInput, AlbumRatingUncheckedCreateWithoutUserInput> | AlbumRatingCreateWithoutUserInput[] | AlbumRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutUserInput | AlbumRatingCreateOrConnectWithoutUserInput[]
    createMany?: AlbumRatingCreateManyUserInputEnvelope
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
  }

  export type RankingSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RankingSessionCreateWithoutUserInput, RankingSessionUncheckedCreateWithoutUserInput> | RankingSessionCreateWithoutUserInput[] | RankingSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutUserInput | RankingSessionCreateOrConnectWithoutUserInput[]
    createMany?: RankingSessionCreateManyUserInputEnvelope
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
  }

  export type AlbumRatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AlbumRatingCreateWithoutUserInput, AlbumRatingUncheckedCreateWithoutUserInput> | AlbumRatingCreateWithoutUserInput[] | AlbumRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutUserInput | AlbumRatingCreateOrConnectWithoutUserInput[]
    createMany?: AlbumRatingCreateManyUserInputEnvelope
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RankingSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<RankingSessionCreateWithoutUserInput, RankingSessionUncheckedCreateWithoutUserInput> | RankingSessionCreateWithoutUserInput[] | RankingSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutUserInput | RankingSessionCreateOrConnectWithoutUserInput[]
    upsert?: RankingSessionUpsertWithWhereUniqueWithoutUserInput | RankingSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RankingSessionCreateManyUserInputEnvelope
    set?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    disconnect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    delete?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    update?: RankingSessionUpdateWithWhereUniqueWithoutUserInput | RankingSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RankingSessionUpdateManyWithWhereWithoutUserInput | RankingSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RankingSessionScalarWhereInput | RankingSessionScalarWhereInput[]
  }

  export type AlbumRatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlbumRatingCreateWithoutUserInput, AlbumRatingUncheckedCreateWithoutUserInput> | AlbumRatingCreateWithoutUserInput[] | AlbumRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutUserInput | AlbumRatingCreateOrConnectWithoutUserInput[]
    upsert?: AlbumRatingUpsertWithWhereUniqueWithoutUserInput | AlbumRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlbumRatingCreateManyUserInputEnvelope
    set?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    disconnect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    delete?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    update?: AlbumRatingUpdateWithWhereUniqueWithoutUserInput | AlbumRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlbumRatingUpdateManyWithWhereWithoutUserInput | AlbumRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlbumRatingScalarWhereInput | AlbumRatingScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RankingSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RankingSessionCreateWithoutUserInput, RankingSessionUncheckedCreateWithoutUserInput> | RankingSessionCreateWithoutUserInput[] | RankingSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutUserInput | RankingSessionCreateOrConnectWithoutUserInput[]
    upsert?: RankingSessionUpsertWithWhereUniqueWithoutUserInput | RankingSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RankingSessionCreateManyUserInputEnvelope
    set?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    disconnect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    delete?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    update?: RankingSessionUpdateWithWhereUniqueWithoutUserInput | RankingSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RankingSessionUpdateManyWithWhereWithoutUserInput | RankingSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RankingSessionScalarWhereInput | RankingSessionScalarWhereInput[]
  }

  export type AlbumRatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AlbumRatingCreateWithoutUserInput, AlbumRatingUncheckedCreateWithoutUserInput> | AlbumRatingCreateWithoutUserInput[] | AlbumRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutUserInput | AlbumRatingCreateOrConnectWithoutUserInput[]
    upsert?: AlbumRatingUpsertWithWhereUniqueWithoutUserInput | AlbumRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AlbumRatingCreateManyUserInputEnvelope
    set?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    disconnect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    delete?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    update?: AlbumRatingUpdateWithWhereUniqueWithoutUserInput | AlbumRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AlbumRatingUpdateManyWithWhereWithoutUserInput | AlbumRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AlbumRatingScalarWhereInput | AlbumRatingScalarWhereInput[]
  }

  export type SongCreateNestedManyWithoutAlbumInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
  }

  export type AlbumRatingCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumRatingCreateWithoutAlbumInput, AlbumRatingUncheckedCreateWithoutAlbumInput> | AlbumRatingCreateWithoutAlbumInput[] | AlbumRatingUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutAlbumInput | AlbumRatingCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumRatingCreateManyAlbumInputEnvelope
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
  }

  export type RankingSessionCreateNestedManyWithoutAlbumInput = {
    create?: XOR<RankingSessionCreateWithoutAlbumInput, RankingSessionUncheckedCreateWithoutAlbumInput> | RankingSessionCreateWithoutAlbumInput[] | RankingSessionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutAlbumInput | RankingSessionCreateOrConnectWithoutAlbumInput[]
    createMany?: RankingSessionCreateManyAlbumInputEnvelope
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
  }

  export type SongUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
  }

  export type AlbumRatingUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumRatingCreateWithoutAlbumInput, AlbumRatingUncheckedCreateWithoutAlbumInput> | AlbumRatingCreateWithoutAlbumInput[] | AlbumRatingUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutAlbumInput | AlbumRatingCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumRatingCreateManyAlbumInputEnvelope
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
  }

  export type RankingSessionUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<RankingSessionCreateWithoutAlbumInput, RankingSessionUncheckedCreateWithoutAlbumInput> | RankingSessionCreateWithoutAlbumInput[] | RankingSessionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutAlbumInput | RankingSessionCreateOrConnectWithoutAlbumInput[]
    createMany?: RankingSessionCreateManyAlbumInputEnvelope
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SongUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    upsert?: SongUpsertWithWhereUniqueWithoutAlbumInput | SongUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    set?: SongWhereUniqueInput | SongWhereUniqueInput[]
    disconnect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    delete?: SongWhereUniqueInput | SongWhereUniqueInput[]
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    update?: SongUpdateWithWhereUniqueWithoutAlbumInput | SongUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: SongUpdateManyWithWhereWithoutAlbumInput | SongUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: SongScalarWhereInput | SongScalarWhereInput[]
  }

  export type AlbumRatingUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumRatingCreateWithoutAlbumInput, AlbumRatingUncheckedCreateWithoutAlbumInput> | AlbumRatingCreateWithoutAlbumInput[] | AlbumRatingUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutAlbumInput | AlbumRatingCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumRatingUpsertWithWhereUniqueWithoutAlbumInput | AlbumRatingUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumRatingCreateManyAlbumInputEnvelope
    set?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    disconnect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    delete?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    update?: AlbumRatingUpdateWithWhereUniqueWithoutAlbumInput | AlbumRatingUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumRatingUpdateManyWithWhereWithoutAlbumInput | AlbumRatingUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumRatingScalarWhereInput | AlbumRatingScalarWhereInput[]
  }

  export type RankingSessionUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<RankingSessionCreateWithoutAlbumInput, RankingSessionUncheckedCreateWithoutAlbumInput> | RankingSessionCreateWithoutAlbumInput[] | RankingSessionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutAlbumInput | RankingSessionCreateOrConnectWithoutAlbumInput[]
    upsert?: RankingSessionUpsertWithWhereUniqueWithoutAlbumInput | RankingSessionUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: RankingSessionCreateManyAlbumInputEnvelope
    set?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    disconnect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    delete?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    update?: RankingSessionUpdateWithWhereUniqueWithoutAlbumInput | RankingSessionUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: RankingSessionUpdateManyWithWhereWithoutAlbumInput | RankingSessionUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: RankingSessionScalarWhereInput | RankingSessionScalarWhereInput[]
  }

  export type SongUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput> | SongCreateWithoutAlbumInput[] | SongUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: SongCreateOrConnectWithoutAlbumInput | SongCreateOrConnectWithoutAlbumInput[]
    upsert?: SongUpsertWithWhereUniqueWithoutAlbumInput | SongUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: SongCreateManyAlbumInputEnvelope
    set?: SongWhereUniqueInput | SongWhereUniqueInput[]
    disconnect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    delete?: SongWhereUniqueInput | SongWhereUniqueInput[]
    connect?: SongWhereUniqueInput | SongWhereUniqueInput[]
    update?: SongUpdateWithWhereUniqueWithoutAlbumInput | SongUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: SongUpdateManyWithWhereWithoutAlbumInput | SongUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: SongScalarWhereInput | SongScalarWhereInput[]
  }

  export type AlbumRatingUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumRatingCreateWithoutAlbumInput, AlbumRatingUncheckedCreateWithoutAlbumInput> | AlbumRatingCreateWithoutAlbumInput[] | AlbumRatingUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumRatingCreateOrConnectWithoutAlbumInput | AlbumRatingCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumRatingUpsertWithWhereUniqueWithoutAlbumInput | AlbumRatingUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumRatingCreateManyAlbumInputEnvelope
    set?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    disconnect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    delete?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    connect?: AlbumRatingWhereUniqueInput | AlbumRatingWhereUniqueInput[]
    update?: AlbumRatingUpdateWithWhereUniqueWithoutAlbumInput | AlbumRatingUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumRatingUpdateManyWithWhereWithoutAlbumInput | AlbumRatingUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumRatingScalarWhereInput | AlbumRatingScalarWhereInput[]
  }

  export type RankingSessionUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<RankingSessionCreateWithoutAlbumInput, RankingSessionUncheckedCreateWithoutAlbumInput> | RankingSessionCreateWithoutAlbumInput[] | RankingSessionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: RankingSessionCreateOrConnectWithoutAlbumInput | RankingSessionCreateOrConnectWithoutAlbumInput[]
    upsert?: RankingSessionUpsertWithWhereUniqueWithoutAlbumInput | RankingSessionUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: RankingSessionCreateManyAlbumInputEnvelope
    set?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    disconnect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    delete?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    connect?: RankingSessionWhereUniqueInput | RankingSessionWhereUniqueInput[]
    update?: RankingSessionUpdateWithWhereUniqueWithoutAlbumInput | RankingSessionUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: RankingSessionUpdateManyWithWhereWithoutAlbumInput | RankingSessionUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: RankingSessionScalarWhereInput | RankingSessionScalarWhereInput[]
  }

  export type AlbumCreateNestedOneWithoutSongsInput = {
    create?: XOR<AlbumCreateWithoutSongsInput, AlbumUncheckedCreateWithoutSongsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutSongsInput
    connect?: AlbumWhereUniqueInput
  }

  export type RankingItemCreateNestedManyWithoutSongInput = {
    create?: XOR<RankingItemCreateWithoutSongInput, RankingItemUncheckedCreateWithoutSongInput> | RankingItemCreateWithoutSongInput[] | RankingItemUncheckedCreateWithoutSongInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSongInput | RankingItemCreateOrConnectWithoutSongInput[]
    createMany?: RankingItemCreateManySongInputEnvelope
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
  }

  export type RankingItemUncheckedCreateNestedManyWithoutSongInput = {
    create?: XOR<RankingItemCreateWithoutSongInput, RankingItemUncheckedCreateWithoutSongInput> | RankingItemCreateWithoutSongInput[] | RankingItemUncheckedCreateWithoutSongInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSongInput | RankingItemCreateOrConnectWithoutSongInput[]
    createMany?: RankingItemCreateManySongInputEnvelope
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AlbumUpdateOneRequiredWithoutSongsNestedInput = {
    create?: XOR<AlbumCreateWithoutSongsInput, AlbumUncheckedCreateWithoutSongsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutSongsInput
    upsert?: AlbumUpsertWithoutSongsInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutSongsInput, AlbumUpdateWithoutSongsInput>, AlbumUncheckedUpdateWithoutSongsInput>
  }

  export type RankingItemUpdateManyWithoutSongNestedInput = {
    create?: XOR<RankingItemCreateWithoutSongInput, RankingItemUncheckedCreateWithoutSongInput> | RankingItemCreateWithoutSongInput[] | RankingItemUncheckedCreateWithoutSongInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSongInput | RankingItemCreateOrConnectWithoutSongInput[]
    upsert?: RankingItemUpsertWithWhereUniqueWithoutSongInput | RankingItemUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: RankingItemCreateManySongInputEnvelope
    set?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    disconnect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    delete?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    update?: RankingItemUpdateWithWhereUniqueWithoutSongInput | RankingItemUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: RankingItemUpdateManyWithWhereWithoutSongInput | RankingItemUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: RankingItemScalarWhereInput | RankingItemScalarWhereInput[]
  }

  export type RankingItemUncheckedUpdateManyWithoutSongNestedInput = {
    create?: XOR<RankingItemCreateWithoutSongInput, RankingItemUncheckedCreateWithoutSongInput> | RankingItemCreateWithoutSongInput[] | RankingItemUncheckedCreateWithoutSongInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSongInput | RankingItemCreateOrConnectWithoutSongInput[]
    upsert?: RankingItemUpsertWithWhereUniqueWithoutSongInput | RankingItemUpsertWithWhereUniqueWithoutSongInput[]
    createMany?: RankingItemCreateManySongInputEnvelope
    set?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    disconnect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    delete?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    update?: RankingItemUpdateWithWhereUniqueWithoutSongInput | RankingItemUpdateWithWhereUniqueWithoutSongInput[]
    updateMany?: RankingItemUpdateManyWithWhereWithoutSongInput | RankingItemUpdateManyWithWhereWithoutSongInput[]
    deleteMany?: RankingItemScalarWhereInput | RankingItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRatingsInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type AlbumCreateNestedOneWithoutRatingsInput = {
    create?: XOR<AlbumCreateWithoutRatingsInput, AlbumUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutRatingsInput
    connect?: AlbumWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsInput
    upsert?: UserUpsertWithoutRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingsInput, UserUpdateWithoutRatingsInput>, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type AlbumUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<AlbumCreateWithoutRatingsInput, AlbumUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutRatingsInput
    upsert?: AlbumUpsertWithoutRatingsInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutRatingsInput, AlbumUpdateWithoutRatingsInput>, AlbumUncheckedUpdateWithoutRatingsInput>
  }

  export type UserCreateNestedOneWithoutRankingsInput = {
    create?: XOR<UserCreateWithoutRankingsInput, UserUncheckedCreateWithoutRankingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingsInput
    connect?: UserWhereUniqueInput
  }

  export type AlbumCreateNestedOneWithoutRankingsInput = {
    create?: XOR<AlbumCreateWithoutRankingsInput, AlbumUncheckedCreateWithoutRankingsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutRankingsInput
    connect?: AlbumWhereUniqueInput
  }

  export type RankingItemCreateNestedManyWithoutSessionInput = {
    create?: XOR<RankingItemCreateWithoutSessionInput, RankingItemUncheckedCreateWithoutSessionInput> | RankingItemCreateWithoutSessionInput[] | RankingItemUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSessionInput | RankingItemCreateOrConnectWithoutSessionInput[]
    createMany?: RankingItemCreateManySessionInputEnvelope
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
  }

  export type RankingItemUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<RankingItemCreateWithoutSessionInput, RankingItemUncheckedCreateWithoutSessionInput> | RankingItemCreateWithoutSessionInput[] | RankingItemUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSessionInput | RankingItemCreateOrConnectWithoutSessionInput[]
    createMany?: RankingItemCreateManySessionInputEnvelope
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutRankingsNestedInput = {
    create?: XOR<UserCreateWithoutRankingsInput, UserUncheckedCreateWithoutRankingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRankingsInput
    upsert?: UserUpsertWithoutRankingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRankingsInput, UserUpdateWithoutRankingsInput>, UserUncheckedUpdateWithoutRankingsInput>
  }

  export type AlbumUpdateOneRequiredWithoutRankingsNestedInput = {
    create?: XOR<AlbumCreateWithoutRankingsInput, AlbumUncheckedCreateWithoutRankingsInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutRankingsInput
    upsert?: AlbumUpsertWithoutRankingsInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutRankingsInput, AlbumUpdateWithoutRankingsInput>, AlbumUncheckedUpdateWithoutRankingsInput>
  }

  export type RankingItemUpdateManyWithoutSessionNestedInput = {
    create?: XOR<RankingItemCreateWithoutSessionInput, RankingItemUncheckedCreateWithoutSessionInput> | RankingItemCreateWithoutSessionInput[] | RankingItemUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSessionInput | RankingItemCreateOrConnectWithoutSessionInput[]
    upsert?: RankingItemUpsertWithWhereUniqueWithoutSessionInput | RankingItemUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: RankingItemCreateManySessionInputEnvelope
    set?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    disconnect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    delete?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    update?: RankingItemUpdateWithWhereUniqueWithoutSessionInput | RankingItemUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: RankingItemUpdateManyWithWhereWithoutSessionInput | RankingItemUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: RankingItemScalarWhereInput | RankingItemScalarWhereInput[]
  }

  export type RankingItemUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<RankingItemCreateWithoutSessionInput, RankingItemUncheckedCreateWithoutSessionInput> | RankingItemCreateWithoutSessionInput[] | RankingItemUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RankingItemCreateOrConnectWithoutSessionInput | RankingItemCreateOrConnectWithoutSessionInput[]
    upsert?: RankingItemUpsertWithWhereUniqueWithoutSessionInput | RankingItemUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: RankingItemCreateManySessionInputEnvelope
    set?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    disconnect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    delete?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    connect?: RankingItemWhereUniqueInput | RankingItemWhereUniqueInput[]
    update?: RankingItemUpdateWithWhereUniqueWithoutSessionInput | RankingItemUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: RankingItemUpdateManyWithWhereWithoutSessionInput | RankingItemUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: RankingItemScalarWhereInput | RankingItemScalarWhereInput[]
  }

  export type RankingSessionCreateNestedOneWithoutItemsInput = {
    create?: XOR<RankingSessionCreateWithoutItemsInput, RankingSessionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RankingSessionCreateOrConnectWithoutItemsInput
    connect?: RankingSessionWhereUniqueInput
  }

  export type SongCreateNestedOneWithoutRankingItemsInput = {
    create?: XOR<SongCreateWithoutRankingItemsInput, SongUncheckedCreateWithoutRankingItemsInput>
    connectOrCreate?: SongCreateOrConnectWithoutRankingItemsInput
    connect?: SongWhereUniqueInput
  }

  export type RankingSessionUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<RankingSessionCreateWithoutItemsInput, RankingSessionUncheckedCreateWithoutItemsInput>
    connectOrCreate?: RankingSessionCreateOrConnectWithoutItemsInput
    upsert?: RankingSessionUpsertWithoutItemsInput
    connect?: RankingSessionWhereUniqueInput
    update?: XOR<XOR<RankingSessionUpdateToOneWithWhereWithoutItemsInput, RankingSessionUpdateWithoutItemsInput>, RankingSessionUncheckedUpdateWithoutItemsInput>
  }

  export type SongUpdateOneRequiredWithoutRankingItemsNestedInput = {
    create?: XOR<SongCreateWithoutRankingItemsInput, SongUncheckedCreateWithoutRankingItemsInput>
    connectOrCreate?: SongCreateOrConnectWithoutRankingItemsInput
    upsert?: SongUpsertWithoutRankingItemsInput
    connect?: SongWhereUniqueInput
    update?: XOR<XOR<SongUpdateToOneWithWhereWithoutRankingItemsInput, SongUpdateWithoutRankingItemsInput>, SongUncheckedUpdateWithoutRankingItemsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type RankingSessionCreateWithoutUserInput = {
    createdAt?: Date | string
    album: AlbumCreateNestedOneWithoutRankingsInput
    items?: RankingItemCreateNestedManyWithoutSessionInput
  }

  export type RankingSessionUncheckedCreateWithoutUserInput = {
    id?: number
    albumId: number
    createdAt?: Date | string
    items?: RankingItemUncheckedCreateNestedManyWithoutSessionInput
  }

  export type RankingSessionCreateOrConnectWithoutUserInput = {
    where: RankingSessionWhereUniqueInput
    create: XOR<RankingSessionCreateWithoutUserInput, RankingSessionUncheckedCreateWithoutUserInput>
  }

  export type RankingSessionCreateManyUserInputEnvelope = {
    data: RankingSessionCreateManyUserInput | RankingSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AlbumRatingCreateWithoutUserInput = {
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    album: AlbumCreateNestedOneWithoutRatingsInput
  }

  export type AlbumRatingUncheckedCreateWithoutUserInput = {
    id?: number
    albumId: number
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumRatingCreateOrConnectWithoutUserInput = {
    where: AlbumRatingWhereUniqueInput
    create: XOR<AlbumRatingCreateWithoutUserInput, AlbumRatingUncheckedCreateWithoutUserInput>
  }

  export type AlbumRatingCreateManyUserInputEnvelope = {
    data: AlbumRatingCreateManyUserInput | AlbumRatingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RankingSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: RankingSessionWhereUniqueInput
    update: XOR<RankingSessionUpdateWithoutUserInput, RankingSessionUncheckedUpdateWithoutUserInput>
    create: XOR<RankingSessionCreateWithoutUserInput, RankingSessionUncheckedCreateWithoutUserInput>
  }

  export type RankingSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: RankingSessionWhereUniqueInput
    data: XOR<RankingSessionUpdateWithoutUserInput, RankingSessionUncheckedUpdateWithoutUserInput>
  }

  export type RankingSessionUpdateManyWithWhereWithoutUserInput = {
    where: RankingSessionScalarWhereInput
    data: XOR<RankingSessionUpdateManyMutationInput, RankingSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type RankingSessionScalarWhereInput = {
    AND?: RankingSessionScalarWhereInput | RankingSessionScalarWhereInput[]
    OR?: RankingSessionScalarWhereInput[]
    NOT?: RankingSessionScalarWhereInput | RankingSessionScalarWhereInput[]
    id?: IntFilter<"RankingSession"> | number
    userId?: IntFilter<"RankingSession"> | number
    albumId?: IntFilter<"RankingSession"> | number
    createdAt?: DateTimeFilter<"RankingSession"> | Date | string
  }

  export type AlbumRatingUpsertWithWhereUniqueWithoutUserInput = {
    where: AlbumRatingWhereUniqueInput
    update: XOR<AlbumRatingUpdateWithoutUserInput, AlbumRatingUncheckedUpdateWithoutUserInput>
    create: XOR<AlbumRatingCreateWithoutUserInput, AlbumRatingUncheckedCreateWithoutUserInput>
  }

  export type AlbumRatingUpdateWithWhereUniqueWithoutUserInput = {
    where: AlbumRatingWhereUniqueInput
    data: XOR<AlbumRatingUpdateWithoutUserInput, AlbumRatingUncheckedUpdateWithoutUserInput>
  }

  export type AlbumRatingUpdateManyWithWhereWithoutUserInput = {
    where: AlbumRatingScalarWhereInput
    data: XOR<AlbumRatingUpdateManyMutationInput, AlbumRatingUncheckedUpdateManyWithoutUserInput>
  }

  export type AlbumRatingScalarWhereInput = {
    AND?: AlbumRatingScalarWhereInput | AlbumRatingScalarWhereInput[]
    OR?: AlbumRatingScalarWhereInput[]
    NOT?: AlbumRatingScalarWhereInput | AlbumRatingScalarWhereInput[]
    id?: IntFilter<"AlbumRating"> | number
    userId?: IntFilter<"AlbumRating"> | number
    albumId?: IntFilter<"AlbumRating"> | number
    stars?: IntFilter<"AlbumRating"> | number
    createdAt?: DateTimeFilter<"AlbumRating"> | Date | string
    updatedAt?: DateTimeFilter<"AlbumRating"> | Date | string
  }

  export type SongCreateWithoutAlbumInput = {
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rankingItems?: RankingItemCreateNestedManyWithoutSongInput
  }

  export type SongUncheckedCreateWithoutAlbumInput = {
    id?: number
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    rankingItems?: RankingItemUncheckedCreateNestedManyWithoutSongInput
  }

  export type SongCreateOrConnectWithoutAlbumInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput>
  }

  export type SongCreateManyAlbumInputEnvelope = {
    data: SongCreateManyAlbumInput | SongCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type AlbumRatingCreateWithoutAlbumInput = {
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsInput
  }

  export type AlbumRatingUncheckedCreateWithoutAlbumInput = {
    id?: number
    userId: number
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumRatingCreateOrConnectWithoutAlbumInput = {
    where: AlbumRatingWhereUniqueInput
    create: XOR<AlbumRatingCreateWithoutAlbumInput, AlbumRatingUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumRatingCreateManyAlbumInputEnvelope = {
    data: AlbumRatingCreateManyAlbumInput | AlbumRatingCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type RankingSessionCreateWithoutAlbumInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRankingsInput
    items?: RankingItemCreateNestedManyWithoutSessionInput
  }

  export type RankingSessionUncheckedCreateWithoutAlbumInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    items?: RankingItemUncheckedCreateNestedManyWithoutSessionInput
  }

  export type RankingSessionCreateOrConnectWithoutAlbumInput = {
    where: RankingSessionWhereUniqueInput
    create: XOR<RankingSessionCreateWithoutAlbumInput, RankingSessionUncheckedCreateWithoutAlbumInput>
  }

  export type RankingSessionCreateManyAlbumInputEnvelope = {
    data: RankingSessionCreateManyAlbumInput | RankingSessionCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type SongUpsertWithWhereUniqueWithoutAlbumInput = {
    where: SongWhereUniqueInput
    update: XOR<SongUpdateWithoutAlbumInput, SongUncheckedUpdateWithoutAlbumInput>
    create: XOR<SongCreateWithoutAlbumInput, SongUncheckedCreateWithoutAlbumInput>
  }

  export type SongUpdateWithWhereUniqueWithoutAlbumInput = {
    where: SongWhereUniqueInput
    data: XOR<SongUpdateWithoutAlbumInput, SongUncheckedUpdateWithoutAlbumInput>
  }

  export type SongUpdateManyWithWhereWithoutAlbumInput = {
    where: SongScalarWhereInput
    data: XOR<SongUpdateManyMutationInput, SongUncheckedUpdateManyWithoutAlbumInput>
  }

  export type SongScalarWhereInput = {
    AND?: SongScalarWhereInput | SongScalarWhereInput[]
    OR?: SongScalarWhereInput[]
    NOT?: SongScalarWhereInput | SongScalarWhereInput[]
    id?: IntFilter<"Song"> | number
    title?: StringFilter<"Song"> | string
    trackNumber?: IntNullableFilter<"Song"> | number | null
    spotifyId?: StringNullableFilter<"Song"> | string | null
    albumId?: IntFilter<"Song"> | number
    createdAt?: DateTimeFilter<"Song"> | Date | string
    updatedAt?: DateTimeFilter<"Song"> | Date | string
  }

  export type AlbumRatingUpsertWithWhereUniqueWithoutAlbumInput = {
    where: AlbumRatingWhereUniqueInput
    update: XOR<AlbumRatingUpdateWithoutAlbumInput, AlbumRatingUncheckedUpdateWithoutAlbumInput>
    create: XOR<AlbumRatingCreateWithoutAlbumInput, AlbumRatingUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumRatingUpdateWithWhereUniqueWithoutAlbumInput = {
    where: AlbumRatingWhereUniqueInput
    data: XOR<AlbumRatingUpdateWithoutAlbumInput, AlbumRatingUncheckedUpdateWithoutAlbumInput>
  }

  export type AlbumRatingUpdateManyWithWhereWithoutAlbumInput = {
    where: AlbumRatingScalarWhereInput
    data: XOR<AlbumRatingUpdateManyMutationInput, AlbumRatingUncheckedUpdateManyWithoutAlbumInput>
  }

  export type RankingSessionUpsertWithWhereUniqueWithoutAlbumInput = {
    where: RankingSessionWhereUniqueInput
    update: XOR<RankingSessionUpdateWithoutAlbumInput, RankingSessionUncheckedUpdateWithoutAlbumInput>
    create: XOR<RankingSessionCreateWithoutAlbumInput, RankingSessionUncheckedCreateWithoutAlbumInput>
  }

  export type RankingSessionUpdateWithWhereUniqueWithoutAlbumInput = {
    where: RankingSessionWhereUniqueInput
    data: XOR<RankingSessionUpdateWithoutAlbumInput, RankingSessionUncheckedUpdateWithoutAlbumInput>
  }

  export type RankingSessionUpdateManyWithWhereWithoutAlbumInput = {
    where: RankingSessionScalarWhereInput
    data: XOR<RankingSessionUpdateManyMutationInput, RankingSessionUncheckedUpdateManyWithoutAlbumInput>
  }

  export type AlbumCreateWithoutSongsInput = {
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: AlbumRatingCreateNestedManyWithoutAlbumInput
    rankings?: RankingSessionCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutSongsInput = {
    id?: number
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: AlbumRatingUncheckedCreateNestedManyWithoutAlbumInput
    rankings?: RankingSessionUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutSongsInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutSongsInput, AlbumUncheckedCreateWithoutSongsInput>
  }

  export type RankingItemCreateWithoutSongInput = {
    position: number
    session: RankingSessionCreateNestedOneWithoutItemsInput
  }

  export type RankingItemUncheckedCreateWithoutSongInput = {
    id?: number
    rankingSessionId: number
    position: number
  }

  export type RankingItemCreateOrConnectWithoutSongInput = {
    where: RankingItemWhereUniqueInput
    create: XOR<RankingItemCreateWithoutSongInput, RankingItemUncheckedCreateWithoutSongInput>
  }

  export type RankingItemCreateManySongInputEnvelope = {
    data: RankingItemCreateManySongInput | RankingItemCreateManySongInput[]
    skipDuplicates?: boolean
  }

  export type AlbumUpsertWithoutSongsInput = {
    update: XOR<AlbumUpdateWithoutSongsInput, AlbumUncheckedUpdateWithoutSongsInput>
    create: XOR<AlbumCreateWithoutSongsInput, AlbumUncheckedCreateWithoutSongsInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutSongsInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutSongsInput, AlbumUncheckedUpdateWithoutSongsInput>
  }

  export type AlbumUpdateWithoutSongsInput = {
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: AlbumRatingUpdateManyWithoutAlbumNestedInput
    rankings?: RankingSessionUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutSongsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: AlbumRatingUncheckedUpdateManyWithoutAlbumNestedInput
    rankings?: RankingSessionUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type RankingItemUpsertWithWhereUniqueWithoutSongInput = {
    where: RankingItemWhereUniqueInput
    update: XOR<RankingItemUpdateWithoutSongInput, RankingItemUncheckedUpdateWithoutSongInput>
    create: XOR<RankingItemCreateWithoutSongInput, RankingItemUncheckedCreateWithoutSongInput>
  }

  export type RankingItemUpdateWithWhereUniqueWithoutSongInput = {
    where: RankingItemWhereUniqueInput
    data: XOR<RankingItemUpdateWithoutSongInput, RankingItemUncheckedUpdateWithoutSongInput>
  }

  export type RankingItemUpdateManyWithWhereWithoutSongInput = {
    where: RankingItemScalarWhereInput
    data: XOR<RankingItemUpdateManyMutationInput, RankingItemUncheckedUpdateManyWithoutSongInput>
  }

  export type RankingItemScalarWhereInput = {
    AND?: RankingItemScalarWhereInput | RankingItemScalarWhereInput[]
    OR?: RankingItemScalarWhereInput[]
    NOT?: RankingItemScalarWhereInput | RankingItemScalarWhereInput[]
    id?: IntFilter<"RankingItem"> | number
    rankingSessionId?: IntFilter<"RankingItem"> | number
    songId?: IntFilter<"RankingItem"> | number
    position?: IntFilter<"RankingItem"> | number
  }

  export type UserCreateWithoutRatingsInput = {
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    rankings?: RankingSessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRatingsInput = {
    id?: number
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    rankings?: RankingSessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
  }

  export type AlbumCreateWithoutRatingsInput = {
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: SongCreateNestedManyWithoutAlbumInput
    rankings?: RankingSessionCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutRatingsInput = {
    id?: number
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: SongUncheckedCreateNestedManyWithoutAlbumInput
    rankings?: RankingSessionUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutRatingsInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutRatingsInput, AlbumUncheckedCreateWithoutRatingsInput>
  }

  export type UserUpsertWithoutRatingsInput = {
    update: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
    create: XOR<UserCreateWithoutRatingsInput, UserUncheckedCreateWithoutRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingsInput, UserUncheckedUpdateWithoutRatingsInput>
  }

  export type UserUpdateWithoutRatingsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankings?: RankingSessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankings?: RankingSessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AlbumUpsertWithoutRatingsInput = {
    update: XOR<AlbumUpdateWithoutRatingsInput, AlbumUncheckedUpdateWithoutRatingsInput>
    create: XOR<AlbumCreateWithoutRatingsInput, AlbumUncheckedCreateWithoutRatingsInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutRatingsInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutRatingsInput, AlbumUncheckedUpdateWithoutRatingsInput>
  }

  export type AlbumUpdateWithoutRatingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: SongUpdateManyWithoutAlbumNestedInput
    rankings?: RankingSessionUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: SongUncheckedUpdateManyWithoutAlbumNestedInput
    rankings?: RankingSessionUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type UserCreateWithoutRankingsInput = {
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: AlbumRatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRankingsInput = {
    id?: number
    email: string
    passwordHash: string
    role?: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: AlbumRatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRankingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRankingsInput, UserUncheckedCreateWithoutRankingsInput>
  }

  export type AlbumCreateWithoutRankingsInput = {
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: SongCreateNestedManyWithoutAlbumInput
    ratings?: AlbumRatingCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutRankingsInput = {
    id?: number
    title: string
    artist?: string | null
    spotifyId?: string | null
    coverUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    songs?: SongUncheckedCreateNestedManyWithoutAlbumInput
    ratings?: AlbumRatingUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutRankingsInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutRankingsInput, AlbumUncheckedCreateWithoutRankingsInput>
  }

  export type RankingItemCreateWithoutSessionInput = {
    position: number
    song: SongCreateNestedOneWithoutRankingItemsInput
  }

  export type RankingItemUncheckedCreateWithoutSessionInput = {
    id?: number
    songId: number
    position: number
  }

  export type RankingItemCreateOrConnectWithoutSessionInput = {
    where: RankingItemWhereUniqueInput
    create: XOR<RankingItemCreateWithoutSessionInput, RankingItemUncheckedCreateWithoutSessionInput>
  }

  export type RankingItemCreateManySessionInputEnvelope = {
    data: RankingItemCreateManySessionInput | RankingItemCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRankingsInput = {
    update: XOR<UserUpdateWithoutRankingsInput, UserUncheckedUpdateWithoutRankingsInput>
    create: XOR<UserCreateWithoutRankingsInput, UserUncheckedCreateWithoutRankingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRankingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRankingsInput, UserUncheckedUpdateWithoutRankingsInput>
  }

  export type UserUpdateWithoutRankingsInput = {
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: AlbumRatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRankingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: AlbumRatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AlbumUpsertWithoutRankingsInput = {
    update: XOR<AlbumUpdateWithoutRankingsInput, AlbumUncheckedUpdateWithoutRankingsInput>
    create: XOR<AlbumCreateWithoutRankingsInput, AlbumUncheckedCreateWithoutRankingsInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutRankingsInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutRankingsInput, AlbumUncheckedUpdateWithoutRankingsInput>
  }

  export type AlbumUpdateWithoutRankingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: SongUpdateManyWithoutAlbumNestedInput
    ratings?: AlbumRatingUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutRankingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    artist?: NullableStringFieldUpdateOperationsInput | string | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    coverUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    songs?: SongUncheckedUpdateManyWithoutAlbumNestedInput
    ratings?: AlbumRatingUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type RankingItemUpsertWithWhereUniqueWithoutSessionInput = {
    where: RankingItemWhereUniqueInput
    update: XOR<RankingItemUpdateWithoutSessionInput, RankingItemUncheckedUpdateWithoutSessionInput>
    create: XOR<RankingItemCreateWithoutSessionInput, RankingItemUncheckedCreateWithoutSessionInput>
  }

  export type RankingItemUpdateWithWhereUniqueWithoutSessionInput = {
    where: RankingItemWhereUniqueInput
    data: XOR<RankingItemUpdateWithoutSessionInput, RankingItemUncheckedUpdateWithoutSessionInput>
  }

  export type RankingItemUpdateManyWithWhereWithoutSessionInput = {
    where: RankingItemScalarWhereInput
    data: XOR<RankingItemUpdateManyMutationInput, RankingItemUncheckedUpdateManyWithoutSessionInput>
  }

  export type RankingSessionCreateWithoutItemsInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutRankingsInput
    album: AlbumCreateNestedOneWithoutRankingsInput
  }

  export type RankingSessionUncheckedCreateWithoutItemsInput = {
    id?: number
    userId: number
    albumId: number
    createdAt?: Date | string
  }

  export type RankingSessionCreateOrConnectWithoutItemsInput = {
    where: RankingSessionWhereUniqueInput
    create: XOR<RankingSessionCreateWithoutItemsInput, RankingSessionUncheckedCreateWithoutItemsInput>
  }

  export type SongCreateWithoutRankingItemsInput = {
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    album: AlbumCreateNestedOneWithoutSongsInput
  }

  export type SongUncheckedCreateWithoutRankingItemsInput = {
    id?: number
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    albumId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SongCreateOrConnectWithoutRankingItemsInput = {
    where: SongWhereUniqueInput
    create: XOR<SongCreateWithoutRankingItemsInput, SongUncheckedCreateWithoutRankingItemsInput>
  }

  export type RankingSessionUpsertWithoutItemsInput = {
    update: XOR<RankingSessionUpdateWithoutItemsInput, RankingSessionUncheckedUpdateWithoutItemsInput>
    create: XOR<RankingSessionCreateWithoutItemsInput, RankingSessionUncheckedCreateWithoutItemsInput>
    where?: RankingSessionWhereInput
  }

  export type RankingSessionUpdateToOneWithWhereWithoutItemsInput = {
    where?: RankingSessionWhereInput
    data: XOR<RankingSessionUpdateWithoutItemsInput, RankingSessionUncheckedUpdateWithoutItemsInput>
  }

  export type RankingSessionUpdateWithoutItemsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRankingsNestedInput
    album?: AlbumUpdateOneRequiredWithoutRankingsNestedInput
  }

  export type RankingSessionUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongUpsertWithoutRankingItemsInput = {
    update: XOR<SongUpdateWithoutRankingItemsInput, SongUncheckedUpdateWithoutRankingItemsInput>
    create: XOR<SongCreateWithoutRankingItemsInput, SongUncheckedCreateWithoutRankingItemsInput>
    where?: SongWhereInput
  }

  export type SongUpdateToOneWithWhereWithoutRankingItemsInput = {
    where?: SongWhereInput
    data: XOR<SongUpdateWithoutRankingItemsInput, SongUncheckedUpdateWithoutRankingItemsInput>
  }

  export type SongUpdateWithoutRankingItemsInput = {
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    album?: AlbumUpdateOneRequiredWithoutSongsNestedInput
  }

  export type SongUncheckedUpdateWithoutRankingItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingSessionCreateManyUserInput = {
    id?: number
    albumId: number
    createdAt?: Date | string
  }

  export type AlbumRatingCreateManyUserInput = {
    id?: number
    albumId: number
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RankingSessionUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    album?: AlbumUpdateOneRequiredWithoutRankingsNestedInput
    items?: RankingItemUpdateManyWithoutSessionNestedInput
  }

  export type RankingSessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: RankingItemUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type RankingSessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumRatingUpdateWithoutUserInput = {
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    album?: AlbumUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type AlbumRatingUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumRatingUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SongCreateManyAlbumInput = {
    id?: number
    title: string
    trackNumber?: number | null
    spotifyId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AlbumRatingCreateManyAlbumInput = {
    id?: number
    userId: number
    stars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RankingSessionCreateManyAlbumInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type SongUpdateWithoutAlbumInput = {
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingItems?: RankingItemUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rankingItems?: RankingItemUncheckedUpdateManyWithoutSongNestedInput
  }

  export type SongUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    trackNumber?: NullableIntFieldUpdateOperationsInput | number | null
    spotifyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumRatingUpdateWithoutAlbumInput = {
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type AlbumRatingUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumRatingUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    stars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingSessionUpdateWithoutAlbumInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRankingsNestedInput
    items?: RankingItemUpdateManyWithoutSessionNestedInput
  }

  export type RankingSessionUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: RankingItemUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type RankingSessionUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RankingItemCreateManySongInput = {
    id?: number
    rankingSessionId: number
    position: number
  }

  export type RankingItemUpdateWithoutSongInput = {
    position?: IntFieldUpdateOperationsInput | number
    session?: RankingSessionUpdateOneRequiredWithoutItemsNestedInput
  }

  export type RankingItemUncheckedUpdateWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    rankingSessionId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankingItemUncheckedUpdateManyWithoutSongInput = {
    id?: IntFieldUpdateOperationsInput | number
    rankingSessionId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankingItemCreateManySessionInput = {
    id?: number
    songId: number
    position: number
  }

  export type RankingItemUpdateWithoutSessionInput = {
    position?: IntFieldUpdateOperationsInput | number
    song?: SongUpdateOneRequiredWithoutRankingItemsNestedInput
  }

  export type RankingItemUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    songId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type RankingItemUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    songId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlbumCountOutputTypeDefaultArgs instead
     */
    export type AlbumCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlbumCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SongCountOutputTypeDefaultArgs instead
     */
    export type SongCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SongCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RankingSessionCountOutputTypeDefaultArgs instead
     */
    export type RankingSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RankingSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlbumDefaultArgs instead
     */
    export type AlbumArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlbumDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SongDefaultArgs instead
     */
    export type SongArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SongDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlbumRatingDefaultArgs instead
     */
    export type AlbumRatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlbumRatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RankingSessionDefaultArgs instead
     */
    export type RankingSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RankingSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RankingItemDefaultArgs instead
     */
    export type RankingItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RankingItemDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}